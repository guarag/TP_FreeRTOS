
tp9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002540  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002650  08002650  00012650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002690  08002690  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08002690  08002690  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002690  08002690  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002690  08002690  00012690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002694  08002694  00012694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002698  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004574  20000014  080026ac  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004588  080026ac  00024588  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a3ae  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d4c  00000000  00000000  0002a3eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd0  00000000  00000000  0002c138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ad8  00000000  00000000  0002cd08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001824e  00000000  00000000  0002d7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c54e  00000000  00000000  00045a2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dd8e  00000000  00000000  00051f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dfd0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fc8  00000000  00000000  000dfd5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000014 	.word	0x20000014
 800012c:	00000000 	.word	0x00000000
 8000130:	08002638 	.word	0x08002638

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000018 	.word	0x20000018
 800014c:	08002638 	.word	0x08002638

08000150 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000150:	b480      	push	{r7}
 8000152:	b083      	sub	sp, #12
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	f103 0208 	add.w	r2, r3, #8
 800015e:	687b      	ldr	r3, [r7, #4]
 8000160:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	f04f 32ff 	mov.w	r2, #4294967295
 8000168:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	f103 0208 	add.w	r2, r3, #8
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	f103 0208 	add.w	r2, r3, #8
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	2200      	movs	r2, #0
 8000182:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000184:	bf00      	nop
 8000186:	370c      	adds	r7, #12
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr

0800018e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800018e:	b480      	push	{r7}
 8000190:	b083      	sub	sp, #12
 8000192:	af00      	add	r7, sp, #0
 8000194:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	2200      	movs	r2, #0
 800019a:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800019c:	bf00      	nop
 800019e:	370c      	adds	r7, #12
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bc80      	pop	{r7}
 80001a4:	4770      	bx	lr

080001a6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80001a6:	b480      	push	{r7}
 80001a8:	b085      	sub	sp, #20
 80001aa:	af00      	add	r7, sp, #0
 80001ac:	6078      	str	r0, [r7, #4]
 80001ae:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80001b0:	683b      	ldr	r3, [r7, #0]
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80001b6:	68bb      	ldr	r3, [r7, #8]
 80001b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80001bc:	d103      	bne.n	80001c6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	691b      	ldr	r3, [r3, #16]
 80001c2:	60fb      	str	r3, [r7, #12]
 80001c4:	e00c      	b.n	80001e0 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	3308      	adds	r3, #8
 80001ca:	60fb      	str	r3, [r7, #12]
 80001cc:	e002      	b.n	80001d4 <vListInsert+0x2e>
 80001ce:	68fb      	ldr	r3, [r7, #12]
 80001d0:	685b      	ldr	r3, [r3, #4]
 80001d2:	60fb      	str	r3, [r7, #12]
 80001d4:	68fb      	ldr	r3, [r7, #12]
 80001d6:	685b      	ldr	r3, [r3, #4]
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	68ba      	ldr	r2, [r7, #8]
 80001dc:	429a      	cmp	r2, r3
 80001de:	d2f6      	bcs.n	80001ce <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80001e0:	68fb      	ldr	r3, [r7, #12]
 80001e2:	685a      	ldr	r2, [r3, #4]
 80001e4:	683b      	ldr	r3, [r7, #0]
 80001e6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80001e8:	683b      	ldr	r3, [r7, #0]
 80001ea:	685b      	ldr	r3, [r3, #4]
 80001ec:	683a      	ldr	r2, [r7, #0]
 80001ee:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80001f0:	683b      	ldr	r3, [r7, #0]
 80001f2:	68fa      	ldr	r2, [r7, #12]
 80001f4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	683a      	ldr	r2, [r7, #0]
 80001fa:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80001fc:	683b      	ldr	r3, [r7, #0]
 80001fe:	687a      	ldr	r2, [r7, #4]
 8000200:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	1c5a      	adds	r2, r3, #1
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	601a      	str	r2, [r3, #0]
}
 800020c:	bf00      	nop
 800020e:	3714      	adds	r7, #20
 8000210:	46bd      	mov	sp, r7
 8000212:	bc80      	pop	{r7}
 8000214:	4770      	bx	lr

08000216 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000216:	b480      	push	{r7}
 8000218:	b085      	sub	sp, #20
 800021a:	af00      	add	r7, sp, #0
 800021c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	691b      	ldr	r3, [r3, #16]
 8000222:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	685b      	ldr	r3, [r3, #4]
 8000228:	687a      	ldr	r2, [r7, #4]
 800022a:	6892      	ldr	r2, [r2, #8]
 800022c:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	689b      	ldr	r3, [r3, #8]
 8000232:	687a      	ldr	r2, [r7, #4]
 8000234:	6852      	ldr	r2, [r2, #4]
 8000236:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	685b      	ldr	r3, [r3, #4]
 800023c:	687a      	ldr	r2, [r7, #4]
 800023e:	429a      	cmp	r2, r3
 8000240:	d103      	bne.n	800024a <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	689a      	ldr	r2, [r3, #8]
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	2200      	movs	r2, #0
 800024e:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	1e5a      	subs	r2, r3, #1
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	681b      	ldr	r3, [r3, #0]
}
 800025e:	4618      	mov	r0, r3
 8000260:	3714      	adds	r7, #20
 8000262:	46bd      	mov	sp, r7
 8000264:	bc80      	pop	{r7}
 8000266:	4770      	bx	lr

08000268 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000268:	b580      	push	{r7, lr}
 800026a:	b08c      	sub	sp, #48	; 0x30
 800026c:	af04      	add	r7, sp, #16
 800026e:	60f8      	str	r0, [r7, #12]
 8000270:	60b9      	str	r1, [r7, #8]
 8000272:	603b      	str	r3, [r7, #0]
 8000274:	4613      	mov	r3, r2
 8000276:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000278:	88fb      	ldrh	r3, [r7, #6]
 800027a:	009b      	lsls	r3, r3, #2
 800027c:	4618      	mov	r0, r3
 800027e:	f000 fe47 	bl	8000f10 <pvPortMalloc>
 8000282:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8000284:	697b      	ldr	r3, [r7, #20]
 8000286:	2b00      	cmp	r3, #0
 8000288:	d00e      	beq.n	80002a8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800028a:	2054      	movs	r0, #84	; 0x54
 800028c:	f000 fe40 	bl	8000f10 <pvPortMalloc>
 8000290:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8000292:	69fb      	ldr	r3, [r7, #28]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d003      	beq.n	80002a0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8000298:	69fb      	ldr	r3, [r7, #28]
 800029a:	697a      	ldr	r2, [r7, #20]
 800029c:	631a      	str	r2, [r3, #48]	; 0x30
 800029e:	e005      	b.n	80002ac <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 80002a0:	6978      	ldr	r0, [r7, #20]
 80002a2:	f000 fe87 	bl	8000fb4 <vPortFree>
 80002a6:	e001      	b.n	80002ac <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80002a8:	2300      	movs	r3, #0
 80002aa:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80002ac:	69fb      	ldr	r3, [r7, #28]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d013      	beq.n	80002da <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80002b2:	88fa      	ldrh	r2, [r7, #6]
 80002b4:	2300      	movs	r3, #0
 80002b6:	9303      	str	r3, [sp, #12]
 80002b8:	69fb      	ldr	r3, [r7, #28]
 80002ba:	9302      	str	r3, [sp, #8]
 80002bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002be:	9301      	str	r3, [sp, #4]
 80002c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002c2:	9300      	str	r3, [sp, #0]
 80002c4:	683b      	ldr	r3, [r7, #0]
 80002c6:	68b9      	ldr	r1, [r7, #8]
 80002c8:	68f8      	ldr	r0, [r7, #12]
 80002ca:	f000 f80e 	bl	80002ea <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80002ce:	69f8      	ldr	r0, [r7, #28]
 80002d0:	f000 f88a 	bl	80003e8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80002d4:	2301      	movs	r3, #1
 80002d6:	61bb      	str	r3, [r7, #24]
 80002d8:	e002      	b.n	80002e0 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80002da:	f04f 33ff 	mov.w	r3, #4294967295
 80002de:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80002e0:	69bb      	ldr	r3, [r7, #24]
    }
 80002e2:	4618      	mov	r0, r3
 80002e4:	3720      	adds	r7, #32
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}

080002ea <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80002ea:	b580      	push	{r7, lr}
 80002ec:	b086      	sub	sp, #24
 80002ee:	af00      	add	r7, sp, #0
 80002f0:	60f8      	str	r0, [r7, #12]
 80002f2:	60b9      	str	r1, [r7, #8]
 80002f4:	607a      	str	r2, [r7, #4]
 80002f6:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80002f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000302:	3b01      	subs	r3, #1
 8000304:	009b      	lsls	r3, r3, #2
 8000306:	4413      	add	r3, r2
 8000308:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800030a:	693b      	ldr	r3, [r7, #16]
 800030c:	f023 0307 	bic.w	r3, r3, #7
 8000310:	613b      	str	r3, [r7, #16]
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000312:	68bb      	ldr	r3, [r7, #8]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d01f      	beq.n	8000358 <prvInitialiseNewTask+0x6e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000318:	2300      	movs	r3, #0
 800031a:	617b      	str	r3, [r7, #20]
 800031c:	e012      	b.n	8000344 <prvInitialiseNewTask+0x5a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800031e:	68ba      	ldr	r2, [r7, #8]
 8000320:	697b      	ldr	r3, [r7, #20]
 8000322:	4413      	add	r3, r2
 8000324:	7819      	ldrb	r1, [r3, #0]
 8000326:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000328:	697b      	ldr	r3, [r7, #20]
 800032a:	4413      	add	r3, r2
 800032c:	3334      	adds	r3, #52	; 0x34
 800032e:	460a      	mov	r2, r1
 8000330:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000332:	68ba      	ldr	r2, [r7, #8]
 8000334:	697b      	ldr	r3, [r7, #20]
 8000336:	4413      	add	r3, r2
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d006      	beq.n	800034c <prvInitialiseNewTask+0x62>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800033e:	697b      	ldr	r3, [r7, #20]
 8000340:	3301      	adds	r3, #1
 8000342:	617b      	str	r3, [r7, #20]
 8000344:	697b      	ldr	r3, [r7, #20]
 8000346:	2b0f      	cmp	r3, #15
 8000348:	d9e9      	bls.n	800031e <prvInitialiseNewTask+0x34>
 800034a:	e000      	b.n	800034e <prvInitialiseNewTask+0x64>
            {
                break;
 800034c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800034e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000350:	2200      	movs	r2, #0
 8000352:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8000356:	e003      	b.n	8000360 <prvInitialiseNewTask+0x76>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800035a:	2200      	movs	r2, #0
 800035c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000360:	6a3b      	ldr	r3, [r7, #32]
 8000362:	2b04      	cmp	r3, #4
 8000364:	d901      	bls.n	800036a <prvInitialiseNewTask+0x80>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000366:	2304      	movs	r3, #4
 8000368:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800036a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800036c:	6a3a      	ldr	r2, [r7, #32]
 800036e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8000370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000372:	6a3a      	ldr	r2, [r7, #32]
 8000374:	645a      	str	r2, [r3, #68]	; 0x44
            pxNewTCB->uxMutexesHeld = 0;
 8000376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000378:	2200      	movs	r2, #0
 800037a:	649a      	str	r2, [r3, #72]	; 0x48
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800037c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800037e:	3304      	adds	r3, #4
 8000380:	4618      	mov	r0, r3
 8000382:	f7ff ff04 	bl	800018e <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000388:	3318      	adds	r3, #24
 800038a:	4618      	mov	r0, r3
 800038c:	f7ff feff 	bl	800018e <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000392:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000394:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000396:	6a3b      	ldr	r3, [r7, #32]
 8000398:	f1c3 0205 	rsb	r2, r3, #5
 800039c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800039e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80003a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80003a4:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80003a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003a8:	334c      	adds	r3, #76	; 0x4c
 80003aa:	2204      	movs	r2, #4
 80003ac:	2100      	movs	r1, #0
 80003ae:	4618      	mov	r0, r3
 80003b0:	f002 f93a 	bl	8002628 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80003b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003b6:	3350      	adds	r3, #80	; 0x50
 80003b8:	2201      	movs	r2, #1
 80003ba:	2100      	movs	r1, #0
 80003bc:	4618      	mov	r0, r3
 80003be:	f002 f933 	bl	8002628 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80003c2:	683a      	ldr	r2, [r7, #0]
 80003c4:	68f9      	ldr	r1, [r7, #12]
 80003c6:	6938      	ldr	r0, [r7, #16]
 80003c8:	f000 fc76 	bl	8000cb8 <pxPortInitialiseStack>
 80003cc:	4602      	mov	r2, r0
 80003ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003d0:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80003d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d002      	beq.n	80003de <prvInitialiseNewTask+0xf4>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80003d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80003dc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80003de:	bf00      	nop
 80003e0:	3718      	adds	r7, #24
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
	...

080003e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b084      	sub	sp, #16
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80003f0:	f000 fcf4 	bl	8000ddc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80003f4:	4b3e      	ldr	r3, [pc, #248]	; (80004f0 <prvAddNewTaskToReadyList+0x108>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	3301      	adds	r3, #1
 80003fa:	4a3d      	ldr	r2, [pc, #244]	; (80004f0 <prvAddNewTaskToReadyList+0x108>)
 80003fc:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80003fe:	4b3d      	ldr	r3, [pc, #244]	; (80004f4 <prvAddNewTaskToReadyList+0x10c>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d109      	bne.n	800041a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000406:	4a3b      	ldr	r2, [pc, #236]	; (80004f4 <prvAddNewTaskToReadyList+0x10c>)
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800040c:	4b38      	ldr	r3, [pc, #224]	; (80004f0 <prvAddNewTaskToReadyList+0x108>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	2b01      	cmp	r3, #1
 8000412:	d110      	bne.n	8000436 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000414:	f000 fb38 	bl	8000a88 <prvInitialiseTaskLists>
 8000418:	e00d      	b.n	8000436 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800041a:	4b37      	ldr	r3, [pc, #220]	; (80004f8 <prvAddNewTaskToReadyList+0x110>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d109      	bne.n	8000436 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000422:	4b34      	ldr	r3, [pc, #208]	; (80004f4 <prvAddNewTaskToReadyList+0x10c>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800042c:	429a      	cmp	r2, r3
 800042e:	d802      	bhi.n	8000436 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000430:	4a30      	ldr	r2, [pc, #192]	; (80004f4 <prvAddNewTaskToReadyList+0x10c>)
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000436:	4b31      	ldr	r3, [pc, #196]	; (80004fc <prvAddNewTaskToReadyList+0x114>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	3301      	adds	r3, #1
 800043c:	4a2f      	ldr	r2, [pc, #188]	; (80004fc <prvAddNewTaskToReadyList+0x114>)
 800043e:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000444:	2201      	movs	r2, #1
 8000446:	409a      	lsls	r2, r3
 8000448:	4b2d      	ldr	r3, [pc, #180]	; (8000500 <prvAddNewTaskToReadyList+0x118>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4313      	orrs	r3, r2
 800044e:	4a2c      	ldr	r2, [pc, #176]	; (8000500 <prvAddNewTaskToReadyList+0x118>)
 8000450:	6013      	str	r3, [r2, #0]
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000456:	492b      	ldr	r1, [pc, #172]	; (8000504 <prvAddNewTaskToReadyList+0x11c>)
 8000458:	4613      	mov	r3, r2
 800045a:	009b      	lsls	r3, r3, #2
 800045c:	4413      	add	r3, r2
 800045e:	009b      	lsls	r3, r3, #2
 8000460:	440b      	add	r3, r1
 8000462:	3304      	adds	r3, #4
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	68fa      	ldr	r2, [r7, #12]
 800046c:	609a      	str	r2, [r3, #8]
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	689a      	ldr	r2, [r3, #8]
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	60da      	str	r2, [r3, #12]
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	689b      	ldr	r3, [r3, #8]
 800047a:	687a      	ldr	r2, [r7, #4]
 800047c:	3204      	adds	r2, #4
 800047e:	605a      	str	r2, [r3, #4]
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	1d1a      	adds	r2, r3, #4
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	609a      	str	r2, [r3, #8]
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800048c:	4613      	mov	r3, r2
 800048e:	009b      	lsls	r3, r3, #2
 8000490:	4413      	add	r3, r2
 8000492:	009b      	lsls	r3, r3, #2
 8000494:	4a1b      	ldr	r2, [pc, #108]	; (8000504 <prvAddNewTaskToReadyList+0x11c>)
 8000496:	441a      	add	r2, r3
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	615a      	str	r2, [r3, #20]
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004a0:	4918      	ldr	r1, [pc, #96]	; (8000504 <prvAddNewTaskToReadyList+0x11c>)
 80004a2:	4613      	mov	r3, r2
 80004a4:	009b      	lsls	r3, r3, #2
 80004a6:	4413      	add	r3, r2
 80004a8:	009b      	lsls	r3, r3, #2
 80004aa:	440b      	add	r3, r1
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	1c59      	adds	r1, r3, #1
 80004b0:	4814      	ldr	r0, [pc, #80]	; (8000504 <prvAddNewTaskToReadyList+0x11c>)
 80004b2:	4613      	mov	r3, r2
 80004b4:	009b      	lsls	r3, r3, #2
 80004b6:	4413      	add	r3, r2
 80004b8:	009b      	lsls	r3, r3, #2
 80004ba:	4403      	add	r3, r0
 80004bc:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80004be:	f000 fca7 	bl	8000e10 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80004c2:	4b0d      	ldr	r3, [pc, #52]	; (80004f8 <prvAddNewTaskToReadyList+0x110>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d00e      	beq.n	80004e8 <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80004ca:	4b0a      	ldr	r3, [pc, #40]	; (80004f4 <prvAddNewTaskToReadyList+0x10c>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004d4:	429a      	cmp	r2, r3
 80004d6:	d207      	bcs.n	80004e8 <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80004d8:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <prvAddNewTaskToReadyList+0x120>)
 80004da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80004de:	601a      	str	r2, [r3, #0]
 80004e0:	f3bf 8f4f 	dsb	sy
 80004e4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80004e8:	bf00      	nop
 80004ea:	3710      	adds	r7, #16
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	20000108 	.word	0x20000108
 80004f4:	20000030 	.word	0x20000030
 80004f8:	20000114 	.word	0x20000114
 80004fc:	20000124 	.word	0x20000124
 8000500:	20000110 	.word	0x20000110
 8000504:	20000034 	.word	0x20000034
 8000508:	e000ed04 	.word	0xe000ed04

0800050c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8000514:	2300      	movs	r3, #0
 8000516:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d008      	beq.n	8000530 <vTaskDelay+0x24>
        {
            configASSERT( uxSchedulerSuspended == 0 );
            vTaskSuspendAll();
 800051e:	f000 f855 	bl	80005cc <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000522:	2100      	movs	r1, #0
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	f000 fb47 	bl	8000bb8 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800052a:	f000 f85d 	bl	80005e8 <xTaskResumeAll>
 800052e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d107      	bne.n	8000546 <vTaskDelay+0x3a>
        {
            portYIELD_WITHIN_API();
 8000536:	4b06      	ldr	r3, [pc, #24]	; (8000550 <vTaskDelay+0x44>)
 8000538:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	f3bf 8f4f 	dsb	sy
 8000542:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000546:	bf00      	nop
 8000548:	3710      	adds	r7, #16
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	e000ed04 	.word	0xe000ed04

08000554 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800055a:	4b15      	ldr	r3, [pc, #84]	; (80005b0 <vTaskStartScheduler+0x5c>)
 800055c:	9301      	str	r3, [sp, #4]
 800055e:	2300      	movs	r3, #0
 8000560:	9300      	str	r3, [sp, #0]
 8000562:	2300      	movs	r3, #0
 8000564:	2280      	movs	r2, #128	; 0x80
 8000566:	4913      	ldr	r1, [pc, #76]	; (80005b4 <vTaskStartScheduler+0x60>)
 8000568:	4813      	ldr	r0, [pc, #76]	; (80005b8 <vTaskStartScheduler+0x64>)
 800056a:	f7ff fe7d 	bl	8000268 <xTaskCreate>
 800056e:	6078      	str	r0, [r7, #4]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	2b01      	cmp	r3, #1
 8000574:	d115      	bne.n	80005a2 <vTaskStartScheduler+0x4e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000576:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 800057a:	f383 8811 	msr	BASEPRI, r3
 800057e:	f3bf 8f6f 	isb	sy
 8000582:	f3bf 8f4f 	dsb	sy
 8000586:	603b      	str	r3, [r7, #0]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000588:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800058a:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <vTaskStartScheduler+0x68>)
 800058c:	f04f 32ff 	mov.w	r2, #4294967295
 8000590:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000592:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <vTaskStartScheduler+0x6c>)
 8000594:	2201      	movs	r2, #1
 8000596:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000598:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <vTaskStartScheduler+0x70>)
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800059e:	f000 fbfd 	bl	8000d9c <xPortStartScheduler>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80005a2:	4b09      	ldr	r3, [pc, #36]	; (80005c8 <vTaskStartScheduler+0x74>)
 80005a4:	681b      	ldr	r3, [r3, #0]
}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	2000012c 	.word	0x2000012c
 80005b4:	08002650 	.word	0x08002650
 80005b8:	08000a59 	.word	0x08000a59
 80005bc:	20000128 	.word	0x20000128
 80005c0:	20000114 	.word	0x20000114
 80005c4:	2000010c 	.word	0x2000010c
 80005c8:	20000000 	.word	0x20000000

080005cc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80005d0:	4b04      	ldr	r3, [pc, #16]	; (80005e4 <vTaskSuspendAll+0x18>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	3301      	adds	r3, #1
 80005d6:	4a03      	ldr	r2, [pc, #12]	; (80005e4 <vTaskSuspendAll+0x18>)
 80005d8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80005da:	bf00      	nop
 80005dc:	46bd      	mov	sp, r7
 80005de:	bc80      	pop	{r7}
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20000130 	.word	0x20000130

080005e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b086      	sub	sp, #24
 80005ec:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 80005f2:	2300      	movs	r3, #0
 80005f4:	613b      	str	r3, [r7, #16]
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80005f6:	f000 fbf1 	bl	8000ddc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80005fa:	4b68      	ldr	r3, [pc, #416]	; (800079c <xTaskResumeAll+0x1b4>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	3b01      	subs	r3, #1
 8000600:	4a66      	ldr	r2, [pc, #408]	; (800079c <xTaskResumeAll+0x1b4>)
 8000602:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000604:	4b65      	ldr	r3, [pc, #404]	; (800079c <xTaskResumeAll+0x1b4>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	f040 80c0 	bne.w	800078e <xTaskResumeAll+0x1a6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800060e:	4b64      	ldr	r3, [pc, #400]	; (80007a0 <xTaskResumeAll+0x1b8>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	2b00      	cmp	r3, #0
 8000614:	f000 80bb 	beq.w	800078e <xTaskResumeAll+0x1a6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000618:	e08a      	b.n	8000730 <xTaskResumeAll+0x148>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800061a:	4b62      	ldr	r3, [pc, #392]	; (80007a4 <xTaskResumeAll+0x1bc>)
 800061c:	68db      	ldr	r3, [r3, #12]
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000622:	697b      	ldr	r3, [r7, #20]
 8000624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	697b      	ldr	r3, [r7, #20]
 800062a:	69db      	ldr	r3, [r3, #28]
 800062c:	697a      	ldr	r2, [r7, #20]
 800062e:	6a12      	ldr	r2, [r2, #32]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	697b      	ldr	r3, [r7, #20]
 8000634:	6a1b      	ldr	r3, [r3, #32]
 8000636:	697a      	ldr	r2, [r7, #20]
 8000638:	69d2      	ldr	r2, [r2, #28]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	685a      	ldr	r2, [r3, #4]
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	3318      	adds	r3, #24
 8000644:	429a      	cmp	r2, r3
 8000646:	d103      	bne.n	8000650 <xTaskResumeAll+0x68>
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	6a1a      	ldr	r2, [r3, #32]
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	2200      	movs	r2, #0
 8000654:	629a      	str	r2, [r3, #40]	; 0x28
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	1e5a      	subs	r2, r3, #1
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	695b      	ldr	r3, [r3, #20]
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	697b      	ldr	r3, [r7, #20]
 8000668:	689b      	ldr	r3, [r3, #8]
 800066a:	697a      	ldr	r2, [r7, #20]
 800066c:	68d2      	ldr	r2, [r2, #12]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	68db      	ldr	r3, [r3, #12]
 8000674:	697a      	ldr	r2, [r7, #20]
 8000676:	6892      	ldr	r2, [r2, #8]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	685a      	ldr	r2, [r3, #4]
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	3304      	adds	r3, #4
 8000682:	429a      	cmp	r2, r3
 8000684:	d103      	bne.n	800068e <xTaskResumeAll+0xa6>
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	68da      	ldr	r2, [r3, #12]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	2200      	movs	r2, #0
 8000692:	615a      	str	r2, [r3, #20]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	1e5a      	subs	r2, r3, #1
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006a2:	2201      	movs	r2, #1
 80006a4:	409a      	lsls	r2, r3
 80006a6:	4b40      	ldr	r3, [pc, #256]	; (80007a8 <xTaskResumeAll+0x1c0>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4313      	orrs	r3, r2
 80006ac:	4a3e      	ldr	r2, [pc, #248]	; (80007a8 <xTaskResumeAll+0x1c0>)
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	697b      	ldr	r3, [r7, #20]
 80006b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006b4:	493d      	ldr	r1, [pc, #244]	; (80007ac <xTaskResumeAll+0x1c4>)
 80006b6:	4613      	mov	r3, r2
 80006b8:	009b      	lsls	r3, r3, #2
 80006ba:	4413      	add	r3, r2
 80006bc:	009b      	lsls	r3, r3, #2
 80006be:	440b      	add	r3, r1
 80006c0:	3304      	adds	r3, #4
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	603b      	str	r3, [r7, #0]
 80006c6:	697b      	ldr	r3, [r7, #20]
 80006c8:	683a      	ldr	r2, [r7, #0]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	689a      	ldr	r2, [r3, #8]
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	689b      	ldr	r3, [r3, #8]
 80006d8:	697a      	ldr	r2, [r7, #20]
 80006da:	3204      	adds	r2, #4
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	697b      	ldr	r3, [r7, #20]
 80006e0:	1d1a      	adds	r2, r3, #4
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006ea:	4613      	mov	r3, r2
 80006ec:	009b      	lsls	r3, r3, #2
 80006ee:	4413      	add	r3, r2
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	4a2e      	ldr	r2, [pc, #184]	; (80007ac <xTaskResumeAll+0x1c4>)
 80006f4:	441a      	add	r2, r3
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	615a      	str	r2, [r3, #20]
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006fe:	492b      	ldr	r1, [pc, #172]	; (80007ac <xTaskResumeAll+0x1c4>)
 8000700:	4613      	mov	r3, r2
 8000702:	009b      	lsls	r3, r3, #2
 8000704:	4413      	add	r3, r2
 8000706:	009b      	lsls	r3, r3, #2
 8000708:	440b      	add	r3, r1
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	1c59      	adds	r1, r3, #1
 800070e:	4827      	ldr	r0, [pc, #156]	; (80007ac <xTaskResumeAll+0x1c4>)
 8000710:	4613      	mov	r3, r2
 8000712:	009b      	lsls	r3, r3, #2
 8000714:	4413      	add	r3, r2
 8000716:	009b      	lsls	r3, r3, #2
 8000718:	4403      	add	r3, r0
 800071a:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000720:	4b23      	ldr	r3, [pc, #140]	; (80007b0 <xTaskResumeAll+0x1c8>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000726:	429a      	cmp	r2, r3
 8000728:	d302      	bcc.n	8000730 <xTaskResumeAll+0x148>
                    {
                        xYieldPending = pdTRUE;
 800072a:	4b22      	ldr	r3, [pc, #136]	; (80007b4 <xTaskResumeAll+0x1cc>)
 800072c:	2201      	movs	r2, #1
 800072e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000730:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <xTaskResumeAll+0x1bc>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	f47f af70 	bne.w	800061a <xTaskResumeAll+0x32>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800073a:	697b      	ldr	r3, [r7, #20]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <xTaskResumeAll+0x15c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8000740:	f000 fa20 	bl	8000b84 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000744:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <xTaskResumeAll+0x1d0>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d010      	beq.n	8000772 <xTaskResumeAll+0x18a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8000750:	f000 f836 	bl	80007c0 <xTaskIncrementTick>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d002      	beq.n	8000760 <xTaskResumeAll+0x178>
                            {
                                xYieldPending = pdTRUE;
 800075a:	4b16      	ldr	r3, [pc, #88]	; (80007b4 <xTaskResumeAll+0x1cc>)
 800075c:	2201      	movs	r2, #1
 800075e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	3b01      	subs	r3, #1
 8000764:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d1f1      	bne.n	8000750 <xTaskResumeAll+0x168>

                        xPendedTicks = 0;
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <xTaskResumeAll+0x1d0>)
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <xTaskResumeAll+0x1cc>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d009      	beq.n	800078e <xTaskResumeAll+0x1a6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800077a:	2301      	movs	r3, #1
 800077c:	613b      	str	r3, [r7, #16]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <xTaskResumeAll+0x1d4>)
 8000780:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	f3bf 8f4f 	dsb	sy
 800078a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800078e:	f000 fb3f 	bl	8000e10 <vPortExitCritical>

    return xAlreadyYielded;
 8000792:	693b      	ldr	r3, [r7, #16]
}
 8000794:	4618      	mov	r0, r3
 8000796:	3718      	adds	r7, #24
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000130 	.word	0x20000130
 80007a0:	20000108 	.word	0x20000108
 80007a4:	200000c8 	.word	0x200000c8
 80007a8:	20000110 	.word	0x20000110
 80007ac:	20000034 	.word	0x20000034
 80007b0:	20000030 	.word	0x20000030
 80007b4:	2000011c 	.word	0x2000011c
 80007b8:	20000118 	.word	0x20000118
 80007bc:	e000ed04 	.word	0xe000ed04

080007c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b088      	sub	sp, #32
 80007c4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80007ca:	4b75      	ldr	r3, [pc, #468]	; (80009a0 <xTaskIncrementTick+0x1e0>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	f040 80dc 	bne.w	800098c <xTaskIncrementTick+0x1cc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80007d4:	4b73      	ldr	r3, [pc, #460]	; (80009a4 <xTaskIncrementTick+0x1e4>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	3301      	adds	r3, #1
 80007da:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80007dc:	4a71      	ldr	r2, [pc, #452]	; (80009a4 <xTaskIncrementTick+0x1e4>)
 80007de:	69bb      	ldr	r3, [r7, #24]
 80007e0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80007e2:	69bb      	ldr	r3, [r7, #24]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d110      	bne.n	800080a <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 80007e8:	4b6f      	ldr	r3, [pc, #444]	; (80009a8 <xTaskIncrementTick+0x1e8>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	617b      	str	r3, [r7, #20]
 80007ee:	4b6f      	ldr	r3, [pc, #444]	; (80009ac <xTaskIncrementTick+0x1ec>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4a6d      	ldr	r2, [pc, #436]	; (80009a8 <xTaskIncrementTick+0x1e8>)
 80007f4:	6013      	str	r3, [r2, #0]
 80007f6:	4a6d      	ldr	r2, [pc, #436]	; (80009ac <xTaskIncrementTick+0x1ec>)
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	6013      	str	r3, [r2, #0]
 80007fc:	4b6c      	ldr	r3, [pc, #432]	; (80009b0 <xTaskIncrementTick+0x1f0>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	3301      	adds	r3, #1
 8000802:	4a6b      	ldr	r2, [pc, #428]	; (80009b0 <xTaskIncrementTick+0x1f0>)
 8000804:	6013      	str	r3, [r2, #0]
 8000806:	f000 f9bd 	bl	8000b84 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800080a:	4b6a      	ldr	r3, [pc, #424]	; (80009b4 <xTaskIncrementTick+0x1f4>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	69ba      	ldr	r2, [r7, #24]
 8000810:	429a      	cmp	r2, r3
 8000812:	f0c0 80a6 	bcc.w	8000962 <xTaskIncrementTick+0x1a2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000816:	4b64      	ldr	r3, [pc, #400]	; (80009a8 <xTaskIncrementTick+0x1e8>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d104      	bne.n	800082a <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000820:	4b64      	ldr	r3, [pc, #400]	; (80009b4 <xTaskIncrementTick+0x1f4>)
 8000822:	f04f 32ff 	mov.w	r2, #4294967295
 8000826:	601a      	str	r2, [r3, #0]
                    break;
 8000828:	e09b      	b.n	8000962 <xTaskIncrementTick+0x1a2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800082a:	4b5f      	ldr	r3, [pc, #380]	; (80009a8 <xTaskIncrementTick+0x1e8>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	68db      	ldr	r3, [r3, #12]
 8000830:	68db      	ldr	r3, [r3, #12]
 8000832:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000834:	693b      	ldr	r3, [r7, #16]
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 800083a:	69ba      	ldr	r2, [r7, #24]
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	429a      	cmp	r2, r3
 8000840:	d203      	bcs.n	800084a <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8000842:	4a5c      	ldr	r2, [pc, #368]	; (80009b4 <xTaskIncrementTick+0x1f4>)
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8000848:	e08b      	b.n	8000962 <xTaskIncrementTick+0x1a2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800084a:	693b      	ldr	r3, [r7, #16]
 800084c:	695b      	ldr	r3, [r3, #20]
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	693b      	ldr	r3, [r7, #16]
 8000852:	689b      	ldr	r3, [r3, #8]
 8000854:	693a      	ldr	r2, [r7, #16]
 8000856:	68d2      	ldr	r2, [r2, #12]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	693b      	ldr	r3, [r7, #16]
 800085c:	68db      	ldr	r3, [r3, #12]
 800085e:	693a      	ldr	r2, [r7, #16]
 8000860:	6892      	ldr	r2, [r2, #8]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	685a      	ldr	r2, [r3, #4]
 8000868:	693b      	ldr	r3, [r7, #16]
 800086a:	3304      	adds	r3, #4
 800086c:	429a      	cmp	r2, r3
 800086e:	d103      	bne.n	8000878 <xTaskIncrementTick+0xb8>
 8000870:	693b      	ldr	r3, [r7, #16]
 8000872:	68da      	ldr	r2, [r3, #12]
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	693b      	ldr	r3, [r7, #16]
 800087a:	2200      	movs	r2, #0
 800087c:	615a      	str	r2, [r3, #20]
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	1e5a      	subs	r2, r3, #1
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000888:	693b      	ldr	r3, [r7, #16]
 800088a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800088c:	2b00      	cmp	r3, #0
 800088e:	d01e      	beq.n	80008ce <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000890:	693b      	ldr	r3, [r7, #16]
 8000892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	693b      	ldr	r3, [r7, #16]
 8000898:	69db      	ldr	r3, [r3, #28]
 800089a:	693a      	ldr	r2, [r7, #16]
 800089c:	6a12      	ldr	r2, [r2, #32]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	693b      	ldr	r3, [r7, #16]
 80008a2:	6a1b      	ldr	r3, [r3, #32]
 80008a4:	693a      	ldr	r2, [r7, #16]
 80008a6:	69d2      	ldr	r2, [r2, #28]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	685a      	ldr	r2, [r3, #4]
 80008ae:	693b      	ldr	r3, [r7, #16]
 80008b0:	3318      	adds	r3, #24
 80008b2:	429a      	cmp	r2, r3
 80008b4:	d103      	bne.n	80008be <xTaskIncrementTick+0xfe>
 80008b6:	693b      	ldr	r3, [r7, #16]
 80008b8:	6a1a      	ldr	r2, [r3, #32]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	693b      	ldr	r3, [r7, #16]
 80008c0:	2200      	movs	r2, #0
 80008c2:	629a      	str	r2, [r3, #40]	; 0x28
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	1e5a      	subs	r2, r3, #1
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80008ce:	693b      	ldr	r3, [r7, #16]
 80008d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008d2:	2201      	movs	r2, #1
 80008d4:	409a      	lsls	r2, r3
 80008d6:	4b38      	ldr	r3, [pc, #224]	; (80009b8 <xTaskIncrementTick+0x1f8>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4313      	orrs	r3, r2
 80008dc:	4a36      	ldr	r2, [pc, #216]	; (80009b8 <xTaskIncrementTick+0x1f8>)
 80008de:	6013      	str	r3, [r2, #0]
 80008e0:	693b      	ldr	r3, [r7, #16]
 80008e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008e4:	4935      	ldr	r1, [pc, #212]	; (80009bc <xTaskIncrementTick+0x1fc>)
 80008e6:	4613      	mov	r3, r2
 80008e8:	009b      	lsls	r3, r3, #2
 80008ea:	4413      	add	r3, r2
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	440b      	add	r3, r1
 80008f0:	3304      	adds	r3, #4
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	603b      	str	r3, [r7, #0]
 80008f6:	693b      	ldr	r3, [r7, #16]
 80008f8:	683a      	ldr	r2, [r7, #0]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	689a      	ldr	r2, [r3, #8]
 8000900:	693b      	ldr	r3, [r7, #16]
 8000902:	60da      	str	r2, [r3, #12]
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	689b      	ldr	r3, [r3, #8]
 8000908:	693a      	ldr	r2, [r7, #16]
 800090a:	3204      	adds	r2, #4
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	693b      	ldr	r3, [r7, #16]
 8000910:	1d1a      	adds	r2, r3, #4
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	693b      	ldr	r3, [r7, #16]
 8000918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800091a:	4613      	mov	r3, r2
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	4413      	add	r3, r2
 8000920:	009b      	lsls	r3, r3, #2
 8000922:	4a26      	ldr	r2, [pc, #152]	; (80009bc <xTaskIncrementTick+0x1fc>)
 8000924:	441a      	add	r2, r3
 8000926:	693b      	ldr	r3, [r7, #16]
 8000928:	615a      	str	r2, [r3, #20]
 800092a:	693b      	ldr	r3, [r7, #16]
 800092c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800092e:	4923      	ldr	r1, [pc, #140]	; (80009bc <xTaskIncrementTick+0x1fc>)
 8000930:	4613      	mov	r3, r2
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	4413      	add	r3, r2
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	440b      	add	r3, r1
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	1c59      	adds	r1, r3, #1
 800093e:	481f      	ldr	r0, [pc, #124]	; (80009bc <xTaskIncrementTick+0x1fc>)
 8000940:	4613      	mov	r3, r2
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	4413      	add	r3, r2
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	4403      	add	r3, r0
 800094a:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800094c:	693b      	ldr	r3, [r7, #16]
 800094e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000950:	4b1b      	ldr	r3, [pc, #108]	; (80009c0 <xTaskIncrementTick+0x200>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000956:	429a      	cmp	r2, r3
 8000958:	f4ff af5d 	bcc.w	8000816 <xTaskIncrementTick+0x56>
                            {
                                xSwitchRequired = pdTRUE;
 800095c:	2301      	movs	r3, #1
 800095e:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000960:	e759      	b.n	8000816 <xTaskIncrementTick+0x56>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000962:	4b17      	ldr	r3, [pc, #92]	; (80009c0 <xTaskIncrementTick+0x200>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000968:	4914      	ldr	r1, [pc, #80]	; (80009bc <xTaskIncrementTick+0x1fc>)
 800096a:	4613      	mov	r3, r2
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	4413      	add	r3, r2
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	440b      	add	r3, r1
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	2b01      	cmp	r3, #1
 8000978:	d901      	bls.n	800097e <xTaskIncrementTick+0x1be>
                {
                    xSwitchRequired = pdTRUE;
 800097a:	2301      	movs	r3, #1
 800097c:	61fb      	str	r3, [r7, #28]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <xTaskIncrementTick+0x204>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d007      	beq.n	8000996 <xTaskIncrementTick+0x1d6>
                {
                    xSwitchRequired = pdTRUE;
 8000986:	2301      	movs	r3, #1
 8000988:	61fb      	str	r3, [r7, #28]
 800098a:	e004      	b.n	8000996 <xTaskIncrementTick+0x1d6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800098c:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <xTaskIncrementTick+0x208>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	3301      	adds	r3, #1
 8000992:	4a0d      	ldr	r2, [pc, #52]	; (80009c8 <xTaskIncrementTick+0x208>)
 8000994:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8000996:	69fb      	ldr	r3, [r7, #28]
}
 8000998:	4618      	mov	r0, r3
 800099a:	3720      	adds	r7, #32
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20000130 	.word	0x20000130
 80009a4:	2000010c 	.word	0x2000010c
 80009a8:	200000c0 	.word	0x200000c0
 80009ac:	200000c4 	.word	0x200000c4
 80009b0:	20000120 	.word	0x20000120
 80009b4:	20000128 	.word	0x20000128
 80009b8:	20000110 	.word	0x20000110
 80009bc:	20000034 	.word	0x20000034
 80009c0:	20000030 	.word	0x20000030
 80009c4:	2000011c 	.word	0x2000011c
 80009c8:	20000118 	.word	0x20000118

080009cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80009cc:	b480      	push	{r7}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80009d2:	4b1c      	ldr	r3, [pc, #112]	; (8000a44 <vTaskSwitchContext+0x78>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d003      	beq.n	80009e2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80009da:	4b1b      	ldr	r3, [pc, #108]	; (8000a48 <vTaskSwitchContext+0x7c>)
 80009dc:	2201      	movs	r2, #1
 80009de:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80009e0:	e02a      	b.n	8000a38 <vTaskSwitchContext+0x6c>
        xYieldPending = pdFALSE;
 80009e2:	4b19      	ldr	r3, [pc, #100]	; (8000a48 <vTaskSwitchContext+0x7c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <vTaskSwitchContext+0x80>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	fab3 f383 	clz	r3, r3
 80009f4:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 80009f6:	78fb      	ldrb	r3, [r7, #3]
 80009f8:	f1c3 031f 	rsb	r3, r3, #31
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fa      	ldr	r2, [r7, #12]
 8000a00:	4613      	mov	r3, r2
 8000a02:	009b      	lsls	r3, r3, #2
 8000a04:	4413      	add	r3, r2
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	4a11      	ldr	r2, [pc, #68]	; (8000a50 <vTaskSwitchContext+0x84>)
 8000a0a:	4413      	add	r3, r2
 8000a0c:	60bb      	str	r3, [r7, #8]
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	685a      	ldr	r2, [r3, #4]
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	685a      	ldr	r2, [r3, #4]
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	3308      	adds	r3, #8
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d104      	bne.n	8000a2e <vTaskSwitchContext+0x62>
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	685a      	ldr	r2, [r3, #4]
 8000a2a:	68bb      	ldr	r3, [r7, #8]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	68db      	ldr	r3, [r3, #12]
 8000a34:	4a07      	ldr	r2, [pc, #28]	; (8000a54 <vTaskSwitchContext+0x88>)
 8000a36:	6013      	str	r3, [r2, #0]
}
 8000a38:	bf00      	nop
 8000a3a:	3714      	adds	r7, #20
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bc80      	pop	{r7}
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	20000130 	.word	0x20000130
 8000a48:	2000011c 	.word	0x2000011c
 8000a4c:	20000110 	.word	0x20000110
 8000a50:	20000034 	.word	0x20000034
 8000a54:	20000030 	.word	0x20000030

08000a58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8000a60:	f000 f852 	bl	8000b08 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <prvIdleTask+0x28>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d9f9      	bls.n	8000a60 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8000a6c:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <prvIdleTask+0x2c>)
 8000a6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	f3bf 8f4f 	dsb	sy
 8000a78:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8000a7c:	e7f0      	b.n	8000a60 <prvIdleTask+0x8>
 8000a7e:	bf00      	nop
 8000a80:	20000034 	.word	0x20000034
 8000a84:	e000ed04 	.word	0xe000ed04

08000a88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000a8e:	2300      	movs	r3, #0
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	e00c      	b.n	8000aae <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000a94:	687a      	ldr	r2, [r7, #4]
 8000a96:	4613      	mov	r3, r2
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	4413      	add	r3, r2
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	4a12      	ldr	r2, [pc, #72]	; (8000ae8 <prvInitialiseTaskLists+0x60>)
 8000aa0:	4413      	add	r3, r2
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff fb54 	bl	8000150 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2b04      	cmp	r3, #4
 8000ab2:	d9ef      	bls.n	8000a94 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8000ab4:	480d      	ldr	r0, [pc, #52]	; (8000aec <prvInitialiseTaskLists+0x64>)
 8000ab6:	f7ff fb4b 	bl	8000150 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8000aba:	480d      	ldr	r0, [pc, #52]	; (8000af0 <prvInitialiseTaskLists+0x68>)
 8000abc:	f7ff fb48 	bl	8000150 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8000ac0:	480c      	ldr	r0, [pc, #48]	; (8000af4 <prvInitialiseTaskLists+0x6c>)
 8000ac2:	f7ff fb45 	bl	8000150 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8000ac6:	480c      	ldr	r0, [pc, #48]	; (8000af8 <prvInitialiseTaskLists+0x70>)
 8000ac8:	f7ff fb42 	bl	8000150 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8000acc:	480b      	ldr	r0, [pc, #44]	; (8000afc <prvInitialiseTaskLists+0x74>)
 8000ace:	f7ff fb3f 	bl	8000150 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <prvInitialiseTaskLists+0x78>)
 8000ad4:	4a05      	ldr	r2, [pc, #20]	; (8000aec <prvInitialiseTaskLists+0x64>)
 8000ad6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000ad8:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <prvInitialiseTaskLists+0x7c>)
 8000ada:	4a05      	ldr	r2, [pc, #20]	; (8000af0 <prvInitialiseTaskLists+0x68>)
 8000adc:	601a      	str	r2, [r3, #0]
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000034 	.word	0x20000034
 8000aec:	20000098 	.word	0x20000098
 8000af0:	200000ac 	.word	0x200000ac
 8000af4:	200000c8 	.word	0x200000c8
 8000af8:	200000dc 	.word	0x200000dc
 8000afc:	200000f4 	.word	0x200000f4
 8000b00:	200000c0 	.word	0x200000c0
 8000b04:	200000c4 	.word	0x200000c4

08000b08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000b0e:	e019      	b.n	8000b44 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8000b10:	f000 f964 	bl	8000ddc <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000b14:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <prvCheckTasksWaitingTermination+0x50>)
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	68db      	ldr	r3, [r3, #12]
 8000b1a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3304      	adds	r3, #4
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff fb78 	bl	8000216 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8000b26:	4b0d      	ldr	r3, [pc, #52]	; (8000b5c <prvCheckTasksWaitingTermination+0x54>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	4a0b      	ldr	r2, [pc, #44]	; (8000b5c <prvCheckTasksWaitingTermination+0x54>)
 8000b2e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8000b30:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <prvCheckTasksWaitingTermination+0x58>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	3b01      	subs	r3, #1
 8000b36:	4a0a      	ldr	r2, [pc, #40]	; (8000b60 <prvCheckTasksWaitingTermination+0x58>)
 8000b38:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8000b3a:	f000 f969 	bl	8000e10 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	f000 f810 	bl	8000b64 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <prvCheckTasksWaitingTermination+0x58>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d1e1      	bne.n	8000b10 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8000b4c:	bf00      	nop
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	200000dc 	.word	0x200000dc
 8000b5c:	20000108 	.word	0x20000108
 8000b60:	200000f0 	.word	0x200000f0

08000b64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b70:	4618      	mov	r0, r3
 8000b72:	f000 fa1f 	bl	8000fb4 <vPortFree>
                vPortFree( pxTCB );
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f000 fa1c 	bl	8000fb4 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000b88:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <prvResetNextTaskUnblockTime+0x2c>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d104      	bne.n	8000b9c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8000b92:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <prvResetNextTaskUnblockTime+0x30>)
 8000b94:	f04f 32ff 	mov.w	r2, #4294967295
 8000b98:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8000b9a:	e005      	b.n	8000ba8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000b9c:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <prvResetNextTaskUnblockTime+0x2c>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	68db      	ldr	r3, [r3, #12]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a03      	ldr	r2, [pc, #12]	; (8000bb4 <prvResetNextTaskUnblockTime+0x30>)
 8000ba6:	6013      	str	r3, [r2, #0]
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr
 8000bb0:	200000c0 	.word	0x200000c0
 8000bb4:	20000128 	.word	0x20000128

08000bb8 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8000bc2:	4b36      	ldr	r3, [pc, #216]	; (8000c9c <prvAddCurrentTaskToDelayedList+0xe4>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8000bc8:	4b35      	ldr	r3, [pc, #212]	; (8000ca0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	3304      	adds	r3, #4
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff fb21 	bl	8000216 <uxListRemove>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d10b      	bne.n	8000bf2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8000bda:	4b31      	ldr	r3, [pc, #196]	; (8000ca0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000be0:	2201      	movs	r2, #1
 8000be2:	fa02 f303 	lsl.w	r3, r2, r3
 8000be6:	43da      	mvns	r2, r3
 8000be8:	4b2e      	ldr	r3, [pc, #184]	; (8000ca4 <prvAddCurrentTaskToDelayedList+0xec>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4013      	ands	r3, r2
 8000bee:	4a2d      	ldr	r2, [pc, #180]	; (8000ca4 <prvAddCurrentTaskToDelayedList+0xec>)
 8000bf0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bf8:	d124      	bne.n	8000c44 <prvAddCurrentTaskToDelayedList+0x8c>
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d021      	beq.n	8000c44 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000c00:	4b29      	ldr	r3, [pc, #164]	; (8000ca8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	613b      	str	r3, [r7, #16]
 8000c06:	4b26      	ldr	r3, [pc, #152]	; (8000ca0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	609a      	str	r2, [r3, #8]
 8000c0e:	4b24      	ldr	r3, [pc, #144]	; (8000ca0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	6892      	ldr	r2, [r2, #8]
 8000c16:	60da      	str	r2, [r3, #12]
 8000c18:	4b21      	ldr	r3, [pc, #132]	; (8000ca0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	693b      	ldr	r3, [r7, #16]
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	3204      	adds	r2, #4
 8000c22:	605a      	str	r2, [r3, #4]
 8000c24:	4b1e      	ldr	r3, [pc, #120]	; (8000ca0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	1d1a      	adds	r2, r3, #4
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ca0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a1d      	ldr	r2, [pc, #116]	; (8000ca8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8000c34:	615a      	str	r2, [r3, #20]
 8000c36:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	4a1a      	ldr	r2, [pc, #104]	; (8000ca8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8000c3e:	6013      	str	r3, [r2, #0]
 8000c40:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8000c42:	e026      	b.n	8000c92 <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8000c44:	697a      	ldr	r2, [r7, #20]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4413      	add	r3, r2
 8000c4a:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8000c4c:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	68fa      	ldr	r2, [r7, #12]
 8000c52:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8000c54:	68fa      	ldr	r2, [r7, #12]
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d209      	bcs.n	8000c70 <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000c5c:	4b13      	ldr	r3, [pc, #76]	; (8000cac <prvAddCurrentTaskToDelayedList+0xf4>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	3304      	adds	r3, #4
 8000c66:	4619      	mov	r1, r3
 8000c68:	4610      	mov	r0, r2
 8000c6a:	f7ff fa9c 	bl	80001a6 <vListInsert>
}
 8000c6e:	e010      	b.n	8000c92 <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000c70:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <prvAddCurrentTaskToDelayedList+0xf8>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	4b0a      	ldr	r3, [pc, #40]	; (8000ca0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	3304      	adds	r3, #4
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4610      	mov	r0, r2
 8000c7e:	f7ff fa92 	bl	80001a6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8000c82:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <prvAddCurrentTaskToDelayedList+0xfc>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	68fa      	ldr	r2, [r7, #12]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d202      	bcs.n	8000c92 <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 8000c8c:	4a09      	ldr	r2, [pc, #36]	; (8000cb4 <prvAddCurrentTaskToDelayedList+0xfc>)
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	6013      	str	r3, [r2, #0]
}
 8000c92:	bf00      	nop
 8000c94:	3718      	adds	r7, #24
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	2000010c 	.word	0x2000010c
 8000ca0:	20000030 	.word	0x20000030
 8000ca4:	20000110 	.word	0x20000110
 8000ca8:	200000f4 	.word	0x200000f4
 8000cac:	200000c4 	.word	0x200000c4
 8000cb0:	200000c0 	.word	0x200000c0
 8000cb4:	20000128 	.word	0x20000128

08000cb8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	3b04      	subs	r3, #4
 8000cc8:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000cd0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	3b04      	subs	r3, #4
 8000cd6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	f023 0201 	bic.w	r2, r3, #1
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	3b04      	subs	r3, #4
 8000ce6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8000ce8:	4a08      	ldr	r2, [pc, #32]	; (8000d0c <pxPortInitialiseStack+0x54>)
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	3b14      	subs	r3, #20
 8000cf2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	3b20      	subs	r3, #32
 8000cfe:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8000d00:	68fb      	ldr	r3, [r7, #12]
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3714      	adds	r7, #20
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr
 8000d0c:	08000d11 	.word	0x08000d11

08000d10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	603b      	str	r3, [r7, #0]
        __asm volatile
 8000d1a:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000d1e:	f383 8811 	msr	BASEPRI, r3
 8000d22:	f3bf 8f6f 	isb	sy
 8000d26:	f3bf 8f4f 	dsb	sy
 8000d2a:	607b      	str	r3, [r7, #4]
    }
 8000d2c:	bf00      	nop
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8000d2e:	bf00      	nop
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d0fc      	beq.n	8000d30 <prvTaskExitError+0x20>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8000d36:	bf00      	nop
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bc80      	pop	{r7}
 8000d40:	4770      	bx	lr
	...

08000d50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <pxCurrentTCBConst2>)
 8000d52:	6819      	ldr	r1, [r3, #0]
 8000d54:	6808      	ldr	r0, [r1, #0]
 8000d56:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000d5a:	f380 8809 	msr	PSP, r0
 8000d5e:	f3bf 8f6f 	isb	sy
 8000d62:	f04f 0000 	mov.w	r0, #0
 8000d66:	f380 8811 	msr	BASEPRI, r0
 8000d6a:	f04e 0e0d 	orr.w	lr, lr, #13
 8000d6e:	4770      	bx	lr

08000d70 <pxCurrentTCBConst2>:
 8000d70:	20000030 	.word	0x20000030
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8000d74:	bf00      	nop
 8000d76:	bf00      	nop

08000d78 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8000d78:	4806      	ldr	r0, [pc, #24]	; (8000d94 <prvPortStartFirstTask+0x1c>)
 8000d7a:	6800      	ldr	r0, [r0, #0]
 8000d7c:	6800      	ldr	r0, [r0, #0]
 8000d7e:	f380 8808 	msr	MSP, r0
 8000d82:	b662      	cpsie	i
 8000d84:	b661      	cpsie	f
 8000d86:	f3bf 8f4f 	dsb	sy
 8000d8a:	f3bf 8f6f 	isb	sy
 8000d8e:	df00      	svc	0
 8000d90:	bf00      	nop
 8000d92:	0000      	.short	0x0000
 8000d94:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8000d98:	bf00      	nop
 8000d9a:	bf00      	nop

08000d9c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
            *pucFirstUserPriorityRegister = ulOriginalPriority;
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8000da0:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <xPortStartScheduler+0x38>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a0b      	ldr	r2, [pc, #44]	; (8000dd4 <xPortStartScheduler+0x38>)
 8000da6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8000daa:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8000dac:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <xPortStartScheduler+0x38>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a08      	ldr	r2, [pc, #32]	; (8000dd4 <xPortStartScheduler+0x38>)
 8000db2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000db6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8000db8:	f000 f890 	bl	8000edc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <xPortStartScheduler+0x3c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8000dc2:	f7ff ffd9 	bl	8000d78 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8000dc6:	f7ff fe01 	bl	80009cc <vTaskSwitchContext>
    prvTaskExitError();
 8000dca:	f7ff ffa1 	bl	8000d10 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8000dce:	2300      	movs	r3, #0
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	e000ed20 	.word	0xe000ed20
 8000dd8:	20000004 	.word	0x20000004

08000ddc <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
        __asm volatile
 8000de2:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000de6:	f383 8811 	msr	BASEPRI, r3
 8000dea:	f3bf 8f6f 	isb	sy
 8000dee:	f3bf 8f4f 	dsb	sy
 8000df2:	607b      	str	r3, [r7, #4]
    }
 8000df4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8000df6:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <vPortEnterCritical+0x30>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	4a03      	ldr	r2, [pc, #12]	; (8000e0c <vPortEnterCritical+0x30>)
 8000dfe:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bc80      	pop	{r7}
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	20000004 	.word	0x20000004

08000e10 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 8000e16:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <vPortExitCritical+0x30>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	4a08      	ldr	r2, [pc, #32]	; (8000e40 <vPortExitCritical+0x30>)
 8000e1e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8000e20:	4b07      	ldr	r3, [pc, #28]	; (8000e40 <vPortExitCritical+0x30>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d105      	bne.n	8000e34 <vPortExitCritical+0x24>
 8000e28:	2300      	movs	r3, #0
 8000e2a:	607b      	str	r3, [r7, #4]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8000e32:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bc80      	pop	{r7}
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	20000004 	.word	0x20000004
	...

08000e50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8000e50:	f3ef 8009 	mrs	r0, PSP
 8000e54:	f3bf 8f6f 	isb	sy
 8000e58:	4b0d      	ldr	r3, [pc, #52]	; (8000e90 <pxCurrentTCBConst>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000e60:	6010      	str	r0, [r2, #0]
 8000e62:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000e66:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8000e6a:	f380 8811 	msr	BASEPRI, r0
 8000e6e:	f7ff fdad 	bl	80009cc <vTaskSwitchContext>
 8000e72:	f04f 0000 	mov.w	r0, #0
 8000e76:	f380 8811 	msr	BASEPRI, r0
 8000e7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000e7e:	6819      	ldr	r1, [r3, #0]
 8000e80:	6808      	ldr	r0, [r1, #0]
 8000e82:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000e86:	f380 8809 	msr	PSP, r0
 8000e8a:	f3bf 8f6f 	isb	sy
 8000e8e:	4770      	bx	lr

08000e90 <pxCurrentTCBConst>:
 8000e90:	20000030 	.word	0x20000030
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8000e94:	bf00      	nop
 8000e96:	bf00      	nop

08000e98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
        __asm volatile
 8000e9e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000ea2:	f383 8811 	msr	BASEPRI, r3
 8000ea6:	f3bf 8f6f 	isb	sy
 8000eaa:	f3bf 8f4f 	dsb	sy
 8000eae:	607b      	str	r3, [r7, #4]
    }
 8000eb0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8000eb2:	f7ff fc85 	bl	80007c0 <xTaskIncrementTick>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d003      	beq.n	8000ec4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <SysTick_Handler+0x40>)
 8000ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	f383 8811 	msr	BASEPRI, r3
    }
 8000ece:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8000ed0:	bf00      	nop
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	e000ed04 	.word	0xe000ed04

08000edc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000ee0:	4b07      	ldr	r3, [pc, #28]	; (8000f00 <vPortSetupTimerInterrupt+0x24>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000ee6:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <vPortSetupTimerInterrupt+0x28>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <vPortSetupTimerInterrupt+0x2c>)
 8000eee:	4a07      	ldr	r2, [pc, #28]	; (8000f0c <vPortSetupTimerInterrupt+0x30>)
 8000ef0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000ef2:	4b03      	ldr	r3, [pc, #12]	; (8000f00 <vPortSetupTimerInterrupt+0x24>)
 8000ef4:	2207      	movs	r2, #7
 8000ef6:	601a      	str	r2, [r3, #0]
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr
 8000f00:	e000e010 	.word	0xe000e010
 8000f04:	e000e018 	.word	0xe000e018
 8000f08:	e000e014 	.word	0xe000e014
 8000f0c:	0001193f 	.word	0x0001193f

08000f10 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
        {
            if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d00e      	beq.n	8000f44 <pvPortMalloc+0x34>
            {
                /* Byte alignment required. Check for overflow. */
                if ( (xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) )) > xWantedSize )
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f023 0307 	bic.w	r3, r3, #7
 8000f2c:	3308      	adds	r3, #8
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d205      	bcs.n	8000f40 <pvPortMalloc+0x30>
                {
                    xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f023 0307 	bic.w	r3, r3, #7
 8000f3a:	3308      	adds	r3, #8
 8000f3c:	607b      	str	r3, [r7, #4]
 8000f3e:	e001      	b.n	8000f44 <pvPortMalloc+0x34>
                }
                else
                {
                    xWantedSize = 0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	607b      	str	r3, [r7, #4]
                }
            }
        }
    #endif

    vTaskSuspendAll();
 8000f44:	f7ff fb42 	bl	80005cc <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 8000f48:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <pvPortMalloc+0x98>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d105      	bne.n	8000f5c <pvPortMalloc+0x4c>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8000f50:	4b16      	ldr	r3, [pc, #88]	; (8000fac <pvPortMalloc+0x9c>)
 8000f52:	f023 0307 	bic.w	r3, r3, #7
 8000f56:	461a      	mov	r2, r3
 8000f58:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <pvPortMalloc+0x98>)
 8000f5a:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) && /* valid size */
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d01b      	beq.n	8000f9a <pvPortMalloc+0x8a>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8000f62:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <pvPortMalloc+0xa0>)
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4413      	add	r3, r2
        if( ( xWantedSize > 0 ) && /* valid size */
 8000f6a:	f244 32f7 	movw	r2, #17399	; 0x43f7
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d813      	bhi.n	8000f9a <pvPortMalloc+0x8a>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 8000f72:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <pvPortMalloc+0xa0>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	441a      	add	r2, r3
 8000f7a:	4b0d      	ldr	r3, [pc, #52]	; (8000fb0 <pvPortMalloc+0xa0>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d90b      	bls.n	8000f9a <pvPortMalloc+0x8a>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 8000f82:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <pvPortMalloc+0x98>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <pvPortMalloc+0xa0>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <pvPortMalloc+0xa0>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4413      	add	r3, r2
 8000f96:	4a06      	ldr	r2, [pc, #24]	; (8000fb0 <pvPortMalloc+0xa0>)
 8000f98:	6013      	str	r3, [r2, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8000f9a:	f7ff fb25 	bl	80005e8 <xTaskResumeAll>
                vApplicationMallocFailedHook();
            }
        }
    #endif

    return pvReturn;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3710      	adds	r7, #16
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20004538 	.word	0x20004538
 8000fac:	2000013b 	.word	0x2000013b
 8000fb0:	20004534 	.word	0x20004534

08000fb4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bc80      	pop	{r7}
 8000fc4:	4770      	bx	lr
	...

08000fc8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000fce:	f000 f9bf 	bl	8001350 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000fd2:	f000 f813 	bl	8000ffc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000fd6:	f000 f857 	bl	8001088 <MX_GPIO_Init>
	/* USER CODE BEGIN 2 */

	/* Instalar la tarea */
	xTaskCreate(tareaParpadeo,
 8000fda:	2300      	movs	r3, #0
 8000fdc:	9301      	str	r3, [sp, #4]
 8000fde:	2301      	movs	r3, #1
 8000fe0:	9300      	str	r3, [sp, #0]
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	2280      	movs	r2, #128	; 0x80
 8000fe6:	4903      	ldr	r1, [pc, #12]	; (8000ff4 <main+0x2c>)
 8000fe8:	4803      	ldr	r0, [pc, #12]	; (8000ff8 <main+0x30>)
 8000fea:	f7ff f93d 	bl	8000268 <xTaskCreate>
			NULL,
			tskIDLE_PRIORITY + 1,
			NULL);

	/* Start the scheduler. */
	vTaskStartScheduler();
 8000fee:	f7ff fab1 	bl	8000554 <vTaskStartScheduler>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000ff2:	e7fe      	b.n	8000ff2 <main+0x2a>
 8000ff4:	08002658 	.word	0x08002658
 8000ff8:	08001121 	.word	0x08001121

08000ffc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b090      	sub	sp, #64	; 0x40
 8001000:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001002:	f107 0318 	add.w	r3, r7, #24
 8001006:	2228      	movs	r2, #40	; 0x28
 8001008:	2100      	movs	r1, #0
 800100a:	4618      	mov	r0, r3
 800100c:	f001 fb0c 	bl	8002628 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]
 8001018:	609a      	str	r2, [r3, #8]
 800101a:	60da      	str	r2, [r3, #12]
 800101c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800101e:	2301      	movs	r3, #1
 8001020:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001022:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001026:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001028:	2300      	movs	r3, #0
 800102a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800102c:	2301      	movs	r3, #1
 800102e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001030:	2302      	movs	r3, #2
 8001032:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001034:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001038:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800103a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800103e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001040:	f107 0318 	add.w	r3, r7, #24
 8001044:	4618      	mov	r0, r3
 8001046:	f000 fc4b 	bl	80018e0 <HAL_RCC_OscConfig>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <SystemClock_Config+0x58>
		Error_Handler();
 8001050:	f000 f888 	bl	8001164 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001054:	230f      	movs	r3, #15
 8001056:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001058:	2302      	movs	r3, #2
 800105a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800105c:	2300      	movs	r3, #0
 800105e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001060:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001064:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	2102      	movs	r1, #2
 800106e:	4618      	mov	r0, r3
 8001070:	f000 feb8 	bl	8001de4 <HAL_RCC_ClockConfig>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <SystemClock_Config+0x82>
		Error_Handler();
 800107a:	f000 f873 	bl	8001164 <Error_Handler>
	}
}
 800107e:	bf00      	nop
 8001080:	3740      	adds	r7, #64	; 0x40
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b088      	sub	sp, #32
 800108c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800108e:	f107 0310 	add.w	r3, r7, #16
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800109c:	4b1e      	ldr	r3, [pc, #120]	; (8001118 <MX_GPIO_Init+0x90>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	4a1d      	ldr	r2, [pc, #116]	; (8001118 <MX_GPIO_Init+0x90>)
 80010a2:	f043 0310 	orr.w	r3, r3, #16
 80010a6:	6193      	str	r3, [r2, #24]
 80010a8:	4b1b      	ldr	r3, [pc, #108]	; (8001118 <MX_GPIO_Init+0x90>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	f003 0310 	and.w	r3, r3, #16
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80010b4:	4b18      	ldr	r3, [pc, #96]	; (8001118 <MX_GPIO_Init+0x90>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	4a17      	ldr	r2, [pc, #92]	; (8001118 <MX_GPIO_Init+0x90>)
 80010ba:	f043 0320 	orr.w	r3, r3, #32
 80010be:	6193      	str	r3, [r2, #24]
 80010c0:	4b15      	ldr	r3, [pc, #84]	; (8001118 <MX_GPIO_Init+0x90>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	f003 0320 	and.w	r3, r3, #32
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80010cc:	4b12      	ldr	r3, [pc, #72]	; (8001118 <MX_GPIO_Init+0x90>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	4a11      	ldr	r2, [pc, #68]	; (8001118 <MX_GPIO_Init+0x90>)
 80010d2:	f043 0304 	orr.w	r3, r3, #4
 80010d6:	6193      	str	r3, [r2, #24]
 80010d8:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <MX_GPIO_Init+0x90>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	f003 0304 	and.w	r3, r3, #4
 80010e0:	607b      	str	r3, [r7, #4]
 80010e2:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80010e4:	2200      	movs	r2, #0
 80010e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010ea:	480c      	ldr	r0, [pc, #48]	; (800111c <MX_GPIO_Init+0x94>)
 80010ec:	f000 fbc6 	bl	800187c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80010f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010f4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f6:	2301      	movs	r3, #1
 80010f8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	2302      	movs	r3, #2
 8001100:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001102:	f107 0310 	add.w	r3, r7, #16
 8001106:	4619      	mov	r1, r3
 8001108:	4804      	ldr	r0, [pc, #16]	; (800111c <MX_GPIO_Init+0x94>)
 800110a:	f000 fa33 	bl	8001574 <HAL_GPIO_Init>

}
 800110e:	bf00      	nop
 8001110:	3720      	adds	r7, #32
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40021000 	.word	0x40021000
 800111c:	40011000 	.word	0x40011000

08001120 <tareaParpadeo>:

/* USER CODE BEGIN 4 */
static void tareaParpadeo(void *pvParameters) {
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
	for (;;) {
		vTaskDelay(pdMS_TO_TICKS(1000));
 8001128:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800112c:	f7ff f9ee 	bl	800050c <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001130:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001134:	4801      	ldr	r0, [pc, #4]	; (800113c <tareaParpadeo+0x1c>)
 8001136:	f000 fbb9 	bl	80018ac <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(1000));
 800113a:	e7f5      	b.n	8001128 <tareaParpadeo+0x8>
 800113c:	40011000 	.word	0x40011000

08001140 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a04      	ldr	r2, [pc, #16]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d101      	bne.n	8001156 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001152:	f000 f913 	bl	800137c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40012c00 	.word	0x40012c00

08001164 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001168:	b672      	cpsid	i
}
 800116a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800116c:	e7fe      	b.n	800116c <Error_Handler+0x8>
	...

08001170 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001176:	4b15      	ldr	r3, [pc, #84]	; (80011cc <HAL_MspInit+0x5c>)
 8001178:	699b      	ldr	r3, [r3, #24]
 800117a:	4a14      	ldr	r2, [pc, #80]	; (80011cc <HAL_MspInit+0x5c>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6193      	str	r3, [r2, #24]
 8001182:	4b12      	ldr	r3, [pc, #72]	; (80011cc <HAL_MspInit+0x5c>)
 8001184:	699b      	ldr	r3, [r3, #24]
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800118e:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <HAL_MspInit+0x5c>)
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	4a0e      	ldr	r2, [pc, #56]	; (80011cc <HAL_MspInit+0x5c>)
 8001194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001198:	61d3      	str	r3, [r2, #28]
 800119a:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <HAL_MspInit+0x5c>)
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011a6:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <HAL_MspInit+0x60>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	4a04      	ldr	r2, [pc, #16]	; (80011d0 <HAL_MspInit+0x60>)
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011c2:	bf00      	nop
 80011c4:	3714      	adds	r7, #20
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr
 80011cc:	40021000 	.word	0x40021000
 80011d0:	40010000 	.word	0x40010000

080011d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08c      	sub	sp, #48	; 0x30
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80011dc:	2300      	movs	r3, #0
 80011de:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80011e0:	2300      	movs	r3, #0
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80011e4:	2300      	movs	r3, #0
 80011e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80011ea:	4b2e      	ldr	r3, [pc, #184]	; (80012a4 <HAL_InitTick+0xd0>)
 80011ec:	699b      	ldr	r3, [r3, #24]
 80011ee:	4a2d      	ldr	r2, [pc, #180]	; (80012a4 <HAL_InitTick+0xd0>)
 80011f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011f4:	6193      	str	r3, [r2, #24]
 80011f6:	4b2b      	ldr	r3, [pc, #172]	; (80012a4 <HAL_InitTick+0xd0>)
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001202:	f107 020c 	add.w	r2, r7, #12
 8001206:	f107 0310 	add.w	r3, r7, #16
 800120a:	4611      	mov	r1, r2
 800120c:	4618      	mov	r0, r3
 800120e:	f000 ff4f 	bl	80020b0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001212:	f000 ff39 	bl	8002088 <HAL_RCC_GetPCLK2Freq>
 8001216:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800121a:	4a23      	ldr	r2, [pc, #140]	; (80012a8 <HAL_InitTick+0xd4>)
 800121c:	fba2 2303 	umull	r2, r3, r2, r3
 8001220:	0c9b      	lsrs	r3, r3, #18
 8001222:	3b01      	subs	r3, #1
 8001224:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001226:	4b21      	ldr	r3, [pc, #132]	; (80012ac <HAL_InitTick+0xd8>)
 8001228:	4a21      	ldr	r2, [pc, #132]	; (80012b0 <HAL_InitTick+0xdc>)
 800122a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800122c:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <HAL_InitTick+0xd8>)
 800122e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001232:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001234:	4a1d      	ldr	r2, [pc, #116]	; (80012ac <HAL_InitTick+0xd8>)
 8001236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001238:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800123a:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <HAL_InitTick+0xd8>)
 800123c:	2200      	movs	r2, #0
 800123e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001240:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <HAL_InitTick+0xd8>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001246:	4b19      	ldr	r3, [pc, #100]	; (80012ac <HAL_InitTick+0xd8>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800124c:	4817      	ldr	r0, [pc, #92]	; (80012ac <HAL_InitTick+0xd8>)
 800124e:	f000 ff7d 	bl	800214c <HAL_TIM_Base_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001258:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800125c:	2b00      	cmp	r3, #0
 800125e:	d11b      	bne.n	8001298 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001260:	4812      	ldr	r0, [pc, #72]	; (80012ac <HAL_InitTick+0xd8>)
 8001262:	f000 ffcb 	bl	80021fc <HAL_TIM_Base_Start_IT>
 8001266:	4603      	mov	r3, r0
 8001268:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800126c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001270:	2b00      	cmp	r3, #0
 8001272:	d111      	bne.n	8001298 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001274:	2019      	movs	r0, #25
 8001276:	f000 f96e 	bl	8001556 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2b0f      	cmp	r3, #15
 800127e:	d808      	bhi.n	8001292 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001280:	2200      	movs	r2, #0
 8001282:	6879      	ldr	r1, [r7, #4]
 8001284:	2019      	movs	r0, #25
 8001286:	f000 f94a 	bl	800151e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800128a:	4a0a      	ldr	r2, [pc, #40]	; (80012b4 <HAL_InitTick+0xe0>)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6013      	str	r3, [r2, #0]
 8001290:	e002      	b.n	8001298 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001298:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800129c:	4618      	mov	r0, r3
 800129e:	3730      	adds	r7, #48	; 0x30
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40021000 	.word	0x40021000
 80012a8:	431bde83 	.word	0x431bde83
 80012ac:	2000453c 	.word	0x2000453c
 80012b0:	40012c00 	.word	0x40012c00
 80012b4:	2000000c 	.word	0x2000000c

080012b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012bc:	e7fe      	b.n	80012bc <NMI_Handler+0x4>

080012be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012c2:	e7fe      	b.n	80012c2 <HardFault_Handler+0x4>

080012c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <MemManage_Handler+0x4>

080012ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ce:	e7fe      	b.n	80012ce <BusFault_Handler+0x4>

080012d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d4:	e7fe      	b.n	80012d4 <UsageFault_Handler+0x4>

080012d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr
	...

080012e4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012e8:	4802      	ldr	r0, [pc, #8]	; (80012f4 <TIM1_UP_IRQHandler+0x10>)
 80012ea:	f000 ffd9 	bl	80022a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	2000453c 	.word	0x2000453c

080012f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr

08001304 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001304:	480c      	ldr	r0, [pc, #48]	; (8001338 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001306:	490d      	ldr	r1, [pc, #52]	; (800133c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001308:	4a0d      	ldr	r2, [pc, #52]	; (8001340 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800130a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800130c:	e002      	b.n	8001314 <LoopCopyDataInit>

0800130e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800130e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001312:	3304      	adds	r3, #4

08001314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001318:	d3f9      	bcc.n	800130e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800131a:	4a0a      	ldr	r2, [pc, #40]	; (8001344 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800131c:	4c0a      	ldr	r4, [pc, #40]	; (8001348 <LoopFillZerobss+0x22>)
  movs r3, #0
 800131e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001320:	e001      	b.n	8001326 <LoopFillZerobss>

08001322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001324:	3204      	adds	r2, #4

08001326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001328:	d3fb      	bcc.n	8001322 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800132a:	f7ff ffe5 	bl	80012f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800132e:	f001 f957 	bl	80025e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001332:	f7ff fe49 	bl	8000fc8 <main>
  bx lr
 8001336:	4770      	bx	lr
  ldr r0, =_sdata
 8001338:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800133c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001340:	08002698 	.word	0x08002698
  ldr r2, =_sbss
 8001344:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001348:	20004588 	.word	0x20004588

0800134c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800134c:	e7fe      	b.n	800134c <ADC1_2_IRQHandler>
	...

08001350 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <HAL_Init+0x28>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a07      	ldr	r2, [pc, #28]	; (8001378 <HAL_Init+0x28>)
 800135a:	f043 0310 	orr.w	r3, r3, #16
 800135e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001360:	2003      	movs	r0, #3
 8001362:	f000 f8d1 	bl	8001508 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001366:	200f      	movs	r0, #15
 8001368:	f7ff ff34 	bl	80011d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800136c:	f7ff ff00 	bl	8001170 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40022000 	.word	0x40022000

0800137c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <HAL_IncTick+0x1c>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	461a      	mov	r2, r3
 8001386:	4b05      	ldr	r3, [pc, #20]	; (800139c <HAL_IncTick+0x20>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4413      	add	r3, r2
 800138c:	4a03      	ldr	r2, [pc, #12]	; (800139c <HAL_IncTick+0x20>)
 800138e:	6013      	str	r3, [r2, #0]
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr
 8001398:	20000010 	.word	0x20000010
 800139c:	20004584 	.word	0x20004584

080013a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  return uwTick;
 80013a4:	4b02      	ldr	r3, [pc, #8]	; (80013b0 <HAL_GetTick+0x10>)
 80013a6:	681b      	ldr	r3, [r3, #0]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr
 80013b0:	20004584 	.word	0x20004584

080013b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013c4:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <__NVIC_SetPriorityGrouping+0x44>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ca:	68ba      	ldr	r2, [r7, #8]
 80013cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013d0:	4013      	ands	r3, r2
 80013d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013e6:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <__NVIC_SetPriorityGrouping+0x44>)
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	60d3      	str	r3, [r2, #12]
}
 80013ec:	bf00      	nop
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bc80      	pop	{r7}
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001400:	4b04      	ldr	r3, [pc, #16]	; (8001414 <__NVIC_GetPriorityGrouping+0x18>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	0a1b      	lsrs	r3, r3, #8
 8001406:	f003 0307 	and.w	r3, r3, #7
}
 800140a:	4618      	mov	r0, r3
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	2b00      	cmp	r3, #0
 8001428:	db0b      	blt.n	8001442 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	f003 021f 	and.w	r2, r3, #31
 8001430:	4906      	ldr	r1, [pc, #24]	; (800144c <__NVIC_EnableIRQ+0x34>)
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	095b      	lsrs	r3, r3, #5
 8001438:	2001      	movs	r0, #1
 800143a:	fa00 f202 	lsl.w	r2, r0, r2
 800143e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001442:	bf00      	nop
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr
 800144c:	e000e100 	.word	0xe000e100

08001450 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	6039      	str	r1, [r7, #0]
 800145a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800145c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001460:	2b00      	cmp	r3, #0
 8001462:	db0a      	blt.n	800147a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	b2da      	uxtb	r2, r3
 8001468:	490c      	ldr	r1, [pc, #48]	; (800149c <__NVIC_SetPriority+0x4c>)
 800146a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146e:	0112      	lsls	r2, r2, #4
 8001470:	b2d2      	uxtb	r2, r2
 8001472:	440b      	add	r3, r1
 8001474:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001478:	e00a      	b.n	8001490 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	b2da      	uxtb	r2, r3
 800147e:	4908      	ldr	r1, [pc, #32]	; (80014a0 <__NVIC_SetPriority+0x50>)
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	f003 030f 	and.w	r3, r3, #15
 8001486:	3b04      	subs	r3, #4
 8001488:	0112      	lsls	r2, r2, #4
 800148a:	b2d2      	uxtb	r2, r2
 800148c:	440b      	add	r3, r1
 800148e:	761a      	strb	r2, [r3, #24]
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	bc80      	pop	{r7}
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	e000e100 	.word	0xe000e100
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b089      	sub	sp, #36	; 0x24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	f1c3 0307 	rsb	r3, r3, #7
 80014be:	2b04      	cmp	r3, #4
 80014c0:	bf28      	it	cs
 80014c2:	2304      	movcs	r3, #4
 80014c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3304      	adds	r3, #4
 80014ca:	2b06      	cmp	r3, #6
 80014cc:	d902      	bls.n	80014d4 <NVIC_EncodePriority+0x30>
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	3b03      	subs	r3, #3
 80014d2:	e000      	b.n	80014d6 <NVIC_EncodePriority+0x32>
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d8:	f04f 32ff 	mov.w	r2, #4294967295
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43da      	mvns	r2, r3
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	401a      	ands	r2, r3
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014ec:	f04f 31ff 	mov.w	r1, #4294967295
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	fa01 f303 	lsl.w	r3, r1, r3
 80014f6:	43d9      	mvns	r1, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014fc:	4313      	orrs	r3, r2
         );
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3724      	adds	r7, #36	; 0x24
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr

08001508 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff ff4f 	bl	80013b4 <__NVIC_SetPriorityGrouping>
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800151e:	b580      	push	{r7, lr}
 8001520:	b086      	sub	sp, #24
 8001522:	af00      	add	r7, sp, #0
 8001524:	4603      	mov	r3, r0
 8001526:	60b9      	str	r1, [r7, #8]
 8001528:	607a      	str	r2, [r7, #4]
 800152a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001530:	f7ff ff64 	bl	80013fc <__NVIC_GetPriorityGrouping>
 8001534:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	68b9      	ldr	r1, [r7, #8]
 800153a:	6978      	ldr	r0, [r7, #20]
 800153c:	f7ff ffb2 	bl	80014a4 <NVIC_EncodePriority>
 8001540:	4602      	mov	r2, r0
 8001542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001546:	4611      	mov	r1, r2
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff81 	bl	8001450 <__NVIC_SetPriority>
}
 800154e:	bf00      	nop
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b082      	sub	sp, #8
 800155a:	af00      	add	r7, sp, #0
 800155c:	4603      	mov	r3, r0
 800155e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff ff57 	bl	8001418 <__NVIC_EnableIRQ>
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
	...

08001574 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001574:	b480      	push	{r7}
 8001576:	b08b      	sub	sp, #44	; 0x2c
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800157e:	2300      	movs	r3, #0
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001582:	2300      	movs	r3, #0
 8001584:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001586:	e169      	b.n	800185c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001588:	2201      	movs	r2, #1
 800158a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	69fa      	ldr	r2, [r7, #28]
 8001598:	4013      	ands	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	f040 8158 	bne.w	8001856 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	4a9a      	ldr	r2, [pc, #616]	; (8001814 <HAL_GPIO_Init+0x2a0>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d05e      	beq.n	800166e <HAL_GPIO_Init+0xfa>
 80015b0:	4a98      	ldr	r2, [pc, #608]	; (8001814 <HAL_GPIO_Init+0x2a0>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d875      	bhi.n	80016a2 <HAL_GPIO_Init+0x12e>
 80015b6:	4a98      	ldr	r2, [pc, #608]	; (8001818 <HAL_GPIO_Init+0x2a4>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d058      	beq.n	800166e <HAL_GPIO_Init+0xfa>
 80015bc:	4a96      	ldr	r2, [pc, #600]	; (8001818 <HAL_GPIO_Init+0x2a4>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d86f      	bhi.n	80016a2 <HAL_GPIO_Init+0x12e>
 80015c2:	4a96      	ldr	r2, [pc, #600]	; (800181c <HAL_GPIO_Init+0x2a8>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d052      	beq.n	800166e <HAL_GPIO_Init+0xfa>
 80015c8:	4a94      	ldr	r2, [pc, #592]	; (800181c <HAL_GPIO_Init+0x2a8>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d869      	bhi.n	80016a2 <HAL_GPIO_Init+0x12e>
 80015ce:	4a94      	ldr	r2, [pc, #592]	; (8001820 <HAL_GPIO_Init+0x2ac>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d04c      	beq.n	800166e <HAL_GPIO_Init+0xfa>
 80015d4:	4a92      	ldr	r2, [pc, #584]	; (8001820 <HAL_GPIO_Init+0x2ac>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d863      	bhi.n	80016a2 <HAL_GPIO_Init+0x12e>
 80015da:	4a92      	ldr	r2, [pc, #584]	; (8001824 <HAL_GPIO_Init+0x2b0>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d046      	beq.n	800166e <HAL_GPIO_Init+0xfa>
 80015e0:	4a90      	ldr	r2, [pc, #576]	; (8001824 <HAL_GPIO_Init+0x2b0>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d85d      	bhi.n	80016a2 <HAL_GPIO_Init+0x12e>
 80015e6:	2b12      	cmp	r3, #18
 80015e8:	d82a      	bhi.n	8001640 <HAL_GPIO_Init+0xcc>
 80015ea:	2b12      	cmp	r3, #18
 80015ec:	d859      	bhi.n	80016a2 <HAL_GPIO_Init+0x12e>
 80015ee:	a201      	add	r2, pc, #4	; (adr r2, 80015f4 <HAL_GPIO_Init+0x80>)
 80015f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f4:	0800166f 	.word	0x0800166f
 80015f8:	08001649 	.word	0x08001649
 80015fc:	0800165b 	.word	0x0800165b
 8001600:	0800169d 	.word	0x0800169d
 8001604:	080016a3 	.word	0x080016a3
 8001608:	080016a3 	.word	0x080016a3
 800160c:	080016a3 	.word	0x080016a3
 8001610:	080016a3 	.word	0x080016a3
 8001614:	080016a3 	.word	0x080016a3
 8001618:	080016a3 	.word	0x080016a3
 800161c:	080016a3 	.word	0x080016a3
 8001620:	080016a3 	.word	0x080016a3
 8001624:	080016a3 	.word	0x080016a3
 8001628:	080016a3 	.word	0x080016a3
 800162c:	080016a3 	.word	0x080016a3
 8001630:	080016a3 	.word	0x080016a3
 8001634:	080016a3 	.word	0x080016a3
 8001638:	08001651 	.word	0x08001651
 800163c:	08001665 	.word	0x08001665
 8001640:	4a79      	ldr	r2, [pc, #484]	; (8001828 <HAL_GPIO_Init+0x2b4>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d013      	beq.n	800166e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001646:	e02c      	b.n	80016a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	623b      	str	r3, [r7, #32]
          break;
 800164e:	e029      	b.n	80016a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	3304      	adds	r3, #4
 8001656:	623b      	str	r3, [r7, #32]
          break;
 8001658:	e024      	b.n	80016a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	3308      	adds	r3, #8
 8001660:	623b      	str	r3, [r7, #32]
          break;
 8001662:	e01f      	b.n	80016a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	330c      	adds	r3, #12
 800166a:	623b      	str	r3, [r7, #32]
          break;
 800166c:	e01a      	b.n	80016a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d102      	bne.n	800167c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001676:	2304      	movs	r3, #4
 8001678:	623b      	str	r3, [r7, #32]
          break;
 800167a:	e013      	b.n	80016a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d105      	bne.n	8001690 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001684:	2308      	movs	r3, #8
 8001686:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	69fa      	ldr	r2, [r7, #28]
 800168c:	611a      	str	r2, [r3, #16]
          break;
 800168e:	e009      	b.n	80016a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001690:	2308      	movs	r3, #8
 8001692:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	69fa      	ldr	r2, [r7, #28]
 8001698:	615a      	str	r2, [r3, #20]
          break;
 800169a:	e003      	b.n	80016a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800169c:	2300      	movs	r3, #0
 800169e:	623b      	str	r3, [r7, #32]
          break;
 80016a0:	e000      	b.n	80016a4 <HAL_GPIO_Init+0x130>
          break;
 80016a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	2bff      	cmp	r3, #255	; 0xff
 80016a8:	d801      	bhi.n	80016ae <HAL_GPIO_Init+0x13a>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	e001      	b.n	80016b2 <HAL_GPIO_Init+0x13e>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	3304      	adds	r3, #4
 80016b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	2bff      	cmp	r3, #255	; 0xff
 80016b8:	d802      	bhi.n	80016c0 <HAL_GPIO_Init+0x14c>
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	e002      	b.n	80016c6 <HAL_GPIO_Init+0x152>
 80016c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c2:	3b08      	subs	r3, #8
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	210f      	movs	r1, #15
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	fa01 f303 	lsl.w	r3, r1, r3
 80016d4:	43db      	mvns	r3, r3
 80016d6:	401a      	ands	r2, r3
 80016d8:	6a39      	ldr	r1, [r7, #32]
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	fa01 f303 	lsl.w	r3, r1, r3
 80016e0:	431a      	orrs	r2, r3
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f000 80b1 	beq.w	8001856 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016f4:	4b4d      	ldr	r3, [pc, #308]	; (800182c <HAL_GPIO_Init+0x2b8>)
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	4a4c      	ldr	r2, [pc, #304]	; (800182c <HAL_GPIO_Init+0x2b8>)
 80016fa:	f043 0301 	orr.w	r3, r3, #1
 80016fe:	6193      	str	r3, [r2, #24]
 8001700:	4b4a      	ldr	r3, [pc, #296]	; (800182c <HAL_GPIO_Init+0x2b8>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800170c:	4a48      	ldr	r2, [pc, #288]	; (8001830 <HAL_GPIO_Init+0x2bc>)
 800170e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001710:	089b      	lsrs	r3, r3, #2
 8001712:	3302      	adds	r3, #2
 8001714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001718:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800171a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171c:	f003 0303 	and.w	r3, r3, #3
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	220f      	movs	r2, #15
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	43db      	mvns	r3, r3
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	4013      	ands	r3, r2
 800172e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4a40      	ldr	r2, [pc, #256]	; (8001834 <HAL_GPIO_Init+0x2c0>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d013      	beq.n	8001760 <HAL_GPIO_Init+0x1ec>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4a3f      	ldr	r2, [pc, #252]	; (8001838 <HAL_GPIO_Init+0x2c4>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d00d      	beq.n	800175c <HAL_GPIO_Init+0x1e8>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4a3e      	ldr	r2, [pc, #248]	; (800183c <HAL_GPIO_Init+0x2c8>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d007      	beq.n	8001758 <HAL_GPIO_Init+0x1e4>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4a3d      	ldr	r2, [pc, #244]	; (8001840 <HAL_GPIO_Init+0x2cc>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d101      	bne.n	8001754 <HAL_GPIO_Init+0x1e0>
 8001750:	2303      	movs	r3, #3
 8001752:	e006      	b.n	8001762 <HAL_GPIO_Init+0x1ee>
 8001754:	2304      	movs	r3, #4
 8001756:	e004      	b.n	8001762 <HAL_GPIO_Init+0x1ee>
 8001758:	2302      	movs	r3, #2
 800175a:	e002      	b.n	8001762 <HAL_GPIO_Init+0x1ee>
 800175c:	2301      	movs	r3, #1
 800175e:	e000      	b.n	8001762 <HAL_GPIO_Init+0x1ee>
 8001760:	2300      	movs	r3, #0
 8001762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001764:	f002 0203 	and.w	r2, r2, #3
 8001768:	0092      	lsls	r2, r2, #2
 800176a:	4093      	lsls	r3, r2
 800176c:	68fa      	ldr	r2, [r7, #12]
 800176e:	4313      	orrs	r3, r2
 8001770:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001772:	492f      	ldr	r1, [pc, #188]	; (8001830 <HAL_GPIO_Init+0x2bc>)
 8001774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001776:	089b      	lsrs	r3, r3, #2
 8001778:	3302      	adds	r3, #2
 800177a:	68fa      	ldr	r2, [r7, #12]
 800177c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d006      	beq.n	800179a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800178c:	4b2d      	ldr	r3, [pc, #180]	; (8001844 <HAL_GPIO_Init+0x2d0>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	492c      	ldr	r1, [pc, #176]	; (8001844 <HAL_GPIO_Init+0x2d0>)
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	4313      	orrs	r3, r2
 8001796:	600b      	str	r3, [r1, #0]
 8001798:	e006      	b.n	80017a8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800179a:	4b2a      	ldr	r3, [pc, #168]	; (8001844 <HAL_GPIO_Init+0x2d0>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	43db      	mvns	r3, r3
 80017a2:	4928      	ldr	r1, [pc, #160]	; (8001844 <HAL_GPIO_Init+0x2d0>)
 80017a4:	4013      	ands	r3, r2
 80017a6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d006      	beq.n	80017c2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017b4:	4b23      	ldr	r3, [pc, #140]	; (8001844 <HAL_GPIO_Init+0x2d0>)
 80017b6:	685a      	ldr	r2, [r3, #4]
 80017b8:	4922      	ldr	r1, [pc, #136]	; (8001844 <HAL_GPIO_Init+0x2d0>)
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	4313      	orrs	r3, r2
 80017be:	604b      	str	r3, [r1, #4]
 80017c0:	e006      	b.n	80017d0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017c2:	4b20      	ldr	r3, [pc, #128]	; (8001844 <HAL_GPIO_Init+0x2d0>)
 80017c4:	685a      	ldr	r2, [r3, #4]
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	43db      	mvns	r3, r3
 80017ca:	491e      	ldr	r1, [pc, #120]	; (8001844 <HAL_GPIO_Init+0x2d0>)
 80017cc:	4013      	ands	r3, r2
 80017ce:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d006      	beq.n	80017ea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017dc:	4b19      	ldr	r3, [pc, #100]	; (8001844 <HAL_GPIO_Init+0x2d0>)
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	4918      	ldr	r1, [pc, #96]	; (8001844 <HAL_GPIO_Init+0x2d0>)
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	608b      	str	r3, [r1, #8]
 80017e8:	e006      	b.n	80017f8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017ea:	4b16      	ldr	r3, [pc, #88]	; (8001844 <HAL_GPIO_Init+0x2d0>)
 80017ec:	689a      	ldr	r2, [r3, #8]
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	43db      	mvns	r3, r3
 80017f2:	4914      	ldr	r1, [pc, #80]	; (8001844 <HAL_GPIO_Init+0x2d0>)
 80017f4:	4013      	ands	r3, r2
 80017f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d021      	beq.n	8001848 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001804:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <HAL_GPIO_Init+0x2d0>)
 8001806:	68da      	ldr	r2, [r3, #12]
 8001808:	490e      	ldr	r1, [pc, #56]	; (8001844 <HAL_GPIO_Init+0x2d0>)
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	4313      	orrs	r3, r2
 800180e:	60cb      	str	r3, [r1, #12]
 8001810:	e021      	b.n	8001856 <HAL_GPIO_Init+0x2e2>
 8001812:	bf00      	nop
 8001814:	10320000 	.word	0x10320000
 8001818:	10310000 	.word	0x10310000
 800181c:	10220000 	.word	0x10220000
 8001820:	10210000 	.word	0x10210000
 8001824:	10120000 	.word	0x10120000
 8001828:	10110000 	.word	0x10110000
 800182c:	40021000 	.word	0x40021000
 8001830:	40010000 	.word	0x40010000
 8001834:	40010800 	.word	0x40010800
 8001838:	40010c00 	.word	0x40010c00
 800183c:	40011000 	.word	0x40011000
 8001840:	40011400 	.word	0x40011400
 8001844:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001848:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <HAL_GPIO_Init+0x304>)
 800184a:	68da      	ldr	r2, [r3, #12]
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	43db      	mvns	r3, r3
 8001850:	4909      	ldr	r1, [pc, #36]	; (8001878 <HAL_GPIO_Init+0x304>)
 8001852:	4013      	ands	r3, r2
 8001854:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001858:	3301      	adds	r3, #1
 800185a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001862:	fa22 f303 	lsr.w	r3, r2, r3
 8001866:	2b00      	cmp	r3, #0
 8001868:	f47f ae8e 	bne.w	8001588 <HAL_GPIO_Init+0x14>
  }
}
 800186c:	bf00      	nop
 800186e:	bf00      	nop
 8001870:	372c      	adds	r7, #44	; 0x2c
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr
 8001878:	40010400 	.word	0x40010400

0800187c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	460b      	mov	r3, r1
 8001886:	807b      	strh	r3, [r7, #2]
 8001888:	4613      	mov	r3, r2
 800188a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800188c:	787b      	ldrb	r3, [r7, #1]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d003      	beq.n	800189a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001892:	887a      	ldrh	r2, [r7, #2]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001898:	e003      	b.n	80018a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800189a:	887b      	ldrh	r3, [r7, #2]
 800189c:	041a      	lsls	r2, r3, #16
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	611a      	str	r2, [r3, #16]
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr

080018ac <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	460b      	mov	r3, r1
 80018b6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018be:	887a      	ldrh	r2, [r7, #2]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	4013      	ands	r3, r2
 80018c4:	041a      	lsls	r2, r3, #16
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	43d9      	mvns	r1, r3
 80018ca:	887b      	ldrh	r3, [r7, #2]
 80018cc:	400b      	ands	r3, r1
 80018ce:	431a      	orrs	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	611a      	str	r2, [r3, #16]
}
 80018d4:	bf00      	nop
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr
	...

080018e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e272      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 8087 	beq.w	8001a0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001900:	4b92      	ldr	r3, [pc, #584]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f003 030c 	and.w	r3, r3, #12
 8001908:	2b04      	cmp	r3, #4
 800190a:	d00c      	beq.n	8001926 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800190c:	4b8f      	ldr	r3, [pc, #572]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 030c 	and.w	r3, r3, #12
 8001914:	2b08      	cmp	r3, #8
 8001916:	d112      	bne.n	800193e <HAL_RCC_OscConfig+0x5e>
 8001918:	4b8c      	ldr	r3, [pc, #560]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001924:	d10b      	bne.n	800193e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001926:	4b89      	ldr	r3, [pc, #548]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d06c      	beq.n	8001a0c <HAL_RCC_OscConfig+0x12c>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d168      	bne.n	8001a0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e24c      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001946:	d106      	bne.n	8001956 <HAL_RCC_OscConfig+0x76>
 8001948:	4b80      	ldr	r3, [pc, #512]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a7f      	ldr	r2, [pc, #508]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 800194e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001952:	6013      	str	r3, [r2, #0]
 8001954:	e02e      	b.n	80019b4 <HAL_RCC_OscConfig+0xd4>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d10c      	bne.n	8001978 <HAL_RCC_OscConfig+0x98>
 800195e:	4b7b      	ldr	r3, [pc, #492]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a7a      	ldr	r2, [pc, #488]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001964:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001968:	6013      	str	r3, [r2, #0]
 800196a:	4b78      	ldr	r3, [pc, #480]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a77      	ldr	r2, [pc, #476]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001970:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001974:	6013      	str	r3, [r2, #0]
 8001976:	e01d      	b.n	80019b4 <HAL_RCC_OscConfig+0xd4>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001980:	d10c      	bne.n	800199c <HAL_RCC_OscConfig+0xbc>
 8001982:	4b72      	ldr	r3, [pc, #456]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a71      	ldr	r2, [pc, #452]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001988:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800198c:	6013      	str	r3, [r2, #0]
 800198e:	4b6f      	ldr	r3, [pc, #444]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a6e      	ldr	r2, [pc, #440]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001998:	6013      	str	r3, [r2, #0]
 800199a:	e00b      	b.n	80019b4 <HAL_RCC_OscConfig+0xd4>
 800199c:	4b6b      	ldr	r3, [pc, #428]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a6a      	ldr	r2, [pc, #424]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 80019a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019a6:	6013      	str	r3, [r2, #0]
 80019a8:	4b68      	ldr	r3, [pc, #416]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a67      	ldr	r2, [pc, #412]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 80019ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d013      	beq.n	80019e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019bc:	f7ff fcf0 	bl	80013a0 <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019c4:	f7ff fcec 	bl	80013a0 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b64      	cmp	r3, #100	; 0x64
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e200      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d6:	4b5d      	ldr	r3, [pc, #372]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0f0      	beq.n	80019c4 <HAL_RCC_OscConfig+0xe4>
 80019e2:	e014      	b.n	8001a0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e4:	f7ff fcdc 	bl	80013a0 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019ec:	f7ff fcd8 	bl	80013a0 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b64      	cmp	r3, #100	; 0x64
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e1ec      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019fe:	4b53      	ldr	r3, [pc, #332]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1f0      	bne.n	80019ec <HAL_RCC_OscConfig+0x10c>
 8001a0a:	e000      	b.n	8001a0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d063      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a1a:	4b4c      	ldr	r3, [pc, #304]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f003 030c 	and.w	r3, r3, #12
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d00b      	beq.n	8001a3e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a26:	4b49      	ldr	r3, [pc, #292]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f003 030c 	and.w	r3, r3, #12
 8001a2e:	2b08      	cmp	r3, #8
 8001a30:	d11c      	bne.n	8001a6c <HAL_RCC_OscConfig+0x18c>
 8001a32:	4b46      	ldr	r3, [pc, #280]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d116      	bne.n	8001a6c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a3e:	4b43      	ldr	r3, [pc, #268]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d005      	beq.n	8001a56 <HAL_RCC_OscConfig+0x176>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d001      	beq.n	8001a56 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e1c0      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a56:	4b3d      	ldr	r3, [pc, #244]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	4939      	ldr	r1, [pc, #228]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a6a:	e03a      	b.n	8001ae2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d020      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a74:	4b36      	ldr	r3, [pc, #216]	; (8001b50 <HAL_RCC_OscConfig+0x270>)
 8001a76:	2201      	movs	r2, #1
 8001a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7a:	f7ff fc91 	bl	80013a0 <HAL_GetTick>
 8001a7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a80:	e008      	b.n	8001a94 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a82:	f7ff fc8d 	bl	80013a0 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e1a1      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a94:	4b2d      	ldr	r3, [pc, #180]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d0f0      	beq.n	8001a82 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa0:	4b2a      	ldr	r3, [pc, #168]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	695b      	ldr	r3, [r3, #20]
 8001aac:	00db      	lsls	r3, r3, #3
 8001aae:	4927      	ldr	r1, [pc, #156]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	600b      	str	r3, [r1, #0]
 8001ab4:	e015      	b.n	8001ae2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ab6:	4b26      	ldr	r3, [pc, #152]	; (8001b50 <HAL_RCC_OscConfig+0x270>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001abc:	f7ff fc70 	bl	80013a0 <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ac4:	f7ff fc6c 	bl	80013a0 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e180      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ad6:	4b1d      	ldr	r3, [pc, #116]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1f0      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0308 	and.w	r3, r3, #8
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d03a      	beq.n	8001b64 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d019      	beq.n	8001b2a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001af6:	4b17      	ldr	r3, [pc, #92]	; (8001b54 <HAL_RCC_OscConfig+0x274>)
 8001af8:	2201      	movs	r2, #1
 8001afa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001afc:	f7ff fc50 	bl	80013a0 <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b04:	f7ff fc4c 	bl	80013a0 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e160      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b16:	4b0d      	ldr	r3, [pc, #52]	; (8001b4c <HAL_RCC_OscConfig+0x26c>)
 8001b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d0f0      	beq.n	8001b04 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b22:	2001      	movs	r0, #1
 8001b24:	f000 faf4 	bl	8002110 <RCC_Delay>
 8001b28:	e01c      	b.n	8001b64 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b2a:	4b0a      	ldr	r3, [pc, #40]	; (8001b54 <HAL_RCC_OscConfig+0x274>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b30:	f7ff fc36 	bl	80013a0 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b36:	e00f      	b.n	8001b58 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b38:	f7ff fc32 	bl	80013a0 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d908      	bls.n	8001b58 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e146      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4f8>
 8001b4a:	bf00      	nop
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	42420000 	.word	0x42420000
 8001b54:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b58:	4b92      	ldr	r3, [pc, #584]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d1e9      	bne.n	8001b38 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0304 	and.w	r3, r3, #4
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f000 80a6 	beq.w	8001cbe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b72:	2300      	movs	r3, #0
 8001b74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b76:	4b8b      	ldr	r3, [pc, #556]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d10d      	bne.n	8001b9e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b82:	4b88      	ldr	r3, [pc, #544]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	4a87      	ldr	r2, [pc, #540]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b8c:	61d3      	str	r3, [r2, #28]
 8001b8e:	4b85      	ldr	r3, [pc, #532]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b96:	60bb      	str	r3, [r7, #8]
 8001b98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b9e:	4b82      	ldr	r3, [pc, #520]	; (8001da8 <HAL_RCC_OscConfig+0x4c8>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d118      	bne.n	8001bdc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001baa:	4b7f      	ldr	r3, [pc, #508]	; (8001da8 <HAL_RCC_OscConfig+0x4c8>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a7e      	ldr	r2, [pc, #504]	; (8001da8 <HAL_RCC_OscConfig+0x4c8>)
 8001bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bb6:	f7ff fbf3 	bl	80013a0 <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bbe:	f7ff fbef 	bl	80013a0 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b64      	cmp	r3, #100	; 0x64
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e103      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd0:	4b75      	ldr	r3, [pc, #468]	; (8001da8 <HAL_RCC_OscConfig+0x4c8>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d0f0      	beq.n	8001bbe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d106      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x312>
 8001be4:	4b6f      	ldr	r3, [pc, #444]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001be6:	6a1b      	ldr	r3, [r3, #32]
 8001be8:	4a6e      	ldr	r2, [pc, #440]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	6213      	str	r3, [r2, #32]
 8001bf0:	e02d      	b.n	8001c4e <HAL_RCC_OscConfig+0x36e>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d10c      	bne.n	8001c14 <HAL_RCC_OscConfig+0x334>
 8001bfa:	4b6a      	ldr	r3, [pc, #424]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001bfc:	6a1b      	ldr	r3, [r3, #32]
 8001bfe:	4a69      	ldr	r2, [pc, #420]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001c00:	f023 0301 	bic.w	r3, r3, #1
 8001c04:	6213      	str	r3, [r2, #32]
 8001c06:	4b67      	ldr	r3, [pc, #412]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001c08:	6a1b      	ldr	r3, [r3, #32]
 8001c0a:	4a66      	ldr	r2, [pc, #408]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001c0c:	f023 0304 	bic.w	r3, r3, #4
 8001c10:	6213      	str	r3, [r2, #32]
 8001c12:	e01c      	b.n	8001c4e <HAL_RCC_OscConfig+0x36e>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	2b05      	cmp	r3, #5
 8001c1a:	d10c      	bne.n	8001c36 <HAL_RCC_OscConfig+0x356>
 8001c1c:	4b61      	ldr	r3, [pc, #388]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001c1e:	6a1b      	ldr	r3, [r3, #32]
 8001c20:	4a60      	ldr	r2, [pc, #384]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001c22:	f043 0304 	orr.w	r3, r3, #4
 8001c26:	6213      	str	r3, [r2, #32]
 8001c28:	4b5e      	ldr	r3, [pc, #376]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001c2a:	6a1b      	ldr	r3, [r3, #32]
 8001c2c:	4a5d      	ldr	r2, [pc, #372]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001c2e:	f043 0301 	orr.w	r3, r3, #1
 8001c32:	6213      	str	r3, [r2, #32]
 8001c34:	e00b      	b.n	8001c4e <HAL_RCC_OscConfig+0x36e>
 8001c36:	4b5b      	ldr	r3, [pc, #364]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001c38:	6a1b      	ldr	r3, [r3, #32]
 8001c3a:	4a5a      	ldr	r2, [pc, #360]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001c3c:	f023 0301 	bic.w	r3, r3, #1
 8001c40:	6213      	str	r3, [r2, #32]
 8001c42:	4b58      	ldr	r3, [pc, #352]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001c44:	6a1b      	ldr	r3, [r3, #32]
 8001c46:	4a57      	ldr	r2, [pc, #348]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001c48:	f023 0304 	bic.w	r3, r3, #4
 8001c4c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d015      	beq.n	8001c82 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c56:	f7ff fba3 	bl	80013a0 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c5c:	e00a      	b.n	8001c74 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5e:	f7ff fb9f 	bl	80013a0 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e0b1      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c74:	4b4b      	ldr	r3, [pc, #300]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001c76:	6a1b      	ldr	r3, [r3, #32]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0ee      	beq.n	8001c5e <HAL_RCC_OscConfig+0x37e>
 8001c80:	e014      	b.n	8001cac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c82:	f7ff fb8d 	bl	80013a0 <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c88:	e00a      	b.n	8001ca0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c8a:	f7ff fb89 	bl	80013a0 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e09b      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ca0:	4b40      	ldr	r3, [pc, #256]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001ca2:	6a1b      	ldr	r3, [r3, #32]
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1ee      	bne.n	8001c8a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001cac:	7dfb      	ldrb	r3, [r7, #23]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d105      	bne.n	8001cbe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cb2:	4b3c      	ldr	r3, [pc, #240]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	4a3b      	ldr	r2, [pc, #236]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001cb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cbc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f000 8087 	beq.w	8001dd6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cc8:	4b36      	ldr	r3, [pc, #216]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f003 030c 	and.w	r3, r3, #12
 8001cd0:	2b08      	cmp	r3, #8
 8001cd2:	d061      	beq.n	8001d98 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	69db      	ldr	r3, [r3, #28]
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d146      	bne.n	8001d6a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cdc:	4b33      	ldr	r3, [pc, #204]	; (8001dac <HAL_RCC_OscConfig+0x4cc>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce2:	f7ff fb5d 	bl	80013a0 <HAL_GetTick>
 8001ce6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ce8:	e008      	b.n	8001cfc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cea:	f7ff fb59 	bl	80013a0 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e06d      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cfc:	4b29      	ldr	r3, [pc, #164]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1f0      	bne.n	8001cea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
 8001d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d10:	d108      	bne.n	8001d24 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d12:	4b24      	ldr	r3, [pc, #144]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	4921      	ldr	r1, [pc, #132]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001d20:	4313      	orrs	r3, r2
 8001d22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d24:	4b1f      	ldr	r3, [pc, #124]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a19      	ldr	r1, [r3, #32]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d34:	430b      	orrs	r3, r1
 8001d36:	491b      	ldr	r1, [pc, #108]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d3c:	4b1b      	ldr	r3, [pc, #108]	; (8001dac <HAL_RCC_OscConfig+0x4cc>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d42:	f7ff fb2d 	bl	80013a0 <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d48:	e008      	b.n	8001d5c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d4a:	f7ff fb29 	bl	80013a0 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e03d      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d5c:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d0f0      	beq.n	8001d4a <HAL_RCC_OscConfig+0x46a>
 8001d68:	e035      	b.n	8001dd6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d6a:	4b10      	ldr	r3, [pc, #64]	; (8001dac <HAL_RCC_OscConfig+0x4cc>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d70:	f7ff fb16 	bl	80013a0 <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d78:	f7ff fb12 	bl	80013a0 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e026      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d8a:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <HAL_RCC_OscConfig+0x4c4>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1f0      	bne.n	8001d78 <HAL_RCC_OscConfig+0x498>
 8001d96:	e01e      	b.n	8001dd6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69db      	ldr	r3, [r3, #28]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d107      	bne.n	8001db0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e019      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4f8>
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40007000 	.word	0x40007000
 8001dac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001db0:	4b0b      	ldr	r3, [pc, #44]	; (8001de0 <HAL_RCC_OscConfig+0x500>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a1b      	ldr	r3, [r3, #32]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d106      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d001      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e000      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3718      	adds	r7, #24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40021000 	.word	0x40021000

08001de4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d101      	bne.n	8001df8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e0d0      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001df8:	4b6a      	ldr	r3, [pc, #424]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d910      	bls.n	8001e28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e06:	4b67      	ldr	r3, [pc, #412]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f023 0207 	bic.w	r2, r3, #7
 8001e0e:	4965      	ldr	r1, [pc, #404]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e16:	4b63      	ldr	r3, [pc, #396]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d001      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e0b8      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d020      	beq.n	8001e76 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0304 	and.w	r3, r3, #4
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d005      	beq.n	8001e4c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e40:	4b59      	ldr	r3, [pc, #356]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	4a58      	ldr	r2, [pc, #352]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e4a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0308 	and.w	r3, r3, #8
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d005      	beq.n	8001e64 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e58:	4b53      	ldr	r3, [pc, #332]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	4a52      	ldr	r2, [pc, #328]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e62:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e64:	4b50      	ldr	r3, [pc, #320]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	494d      	ldr	r1, [pc, #308]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d040      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d107      	bne.n	8001e9a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e8a:	4b47      	ldr	r3, [pc, #284]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d115      	bne.n	8001ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e07f      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d107      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ea2:	4b41      	ldr	r3, [pc, #260]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d109      	bne.n	8001ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e073      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb2:	4b3d      	ldr	r3, [pc, #244]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e06b      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ec2:	4b39      	ldr	r3, [pc, #228]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f023 0203 	bic.w	r2, r3, #3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	4936      	ldr	r1, [pc, #216]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ed4:	f7ff fa64 	bl	80013a0 <HAL_GetTick>
 8001ed8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eda:	e00a      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001edc:	f7ff fa60 	bl	80013a0 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e053      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ef2:	4b2d      	ldr	r3, [pc, #180]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f003 020c 	and.w	r2, r3, #12
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d1eb      	bne.n	8001edc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f04:	4b27      	ldr	r3, [pc, #156]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0307 	and.w	r3, r3, #7
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d210      	bcs.n	8001f34 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f12:	4b24      	ldr	r3, [pc, #144]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f023 0207 	bic.w	r2, r3, #7
 8001f1a:	4922      	ldr	r1, [pc, #136]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f22:	4b20      	ldr	r3, [pc, #128]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d001      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e032      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d008      	beq.n	8001f52 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f40:	4b19      	ldr	r3, [pc, #100]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	4916      	ldr	r1, [pc, #88]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0308 	and.w	r3, r3, #8
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d009      	beq.n	8001f72 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f5e:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	490e      	ldr	r1, [pc, #56]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f72:	f000 f821 	bl	8001fb8 <HAL_RCC_GetSysClockFreq>
 8001f76:	4602      	mov	r2, r0
 8001f78:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	091b      	lsrs	r3, r3, #4
 8001f7e:	f003 030f 	and.w	r3, r3, #15
 8001f82:	490a      	ldr	r1, [pc, #40]	; (8001fac <HAL_RCC_ClockConfig+0x1c8>)
 8001f84:	5ccb      	ldrb	r3, [r1, r3]
 8001f86:	fa22 f303 	lsr.w	r3, r2, r3
 8001f8a:	4a09      	ldr	r2, [pc, #36]	; (8001fb0 <HAL_RCC_ClockConfig+0x1cc>)
 8001f8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f8e:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <HAL_RCC_ClockConfig+0x1d0>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff f91e 	bl	80011d4 <HAL_InitTick>

  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40022000 	.word	0x40022000
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	08002678 	.word	0x08002678
 8001fb0:	20000008 	.word	0x20000008
 8001fb4:	2000000c 	.word	0x2000000c

08001fb8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fb8:	b490      	push	{r4, r7}
 8001fba:	b08a      	sub	sp, #40	; 0x28
 8001fbc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001fbe:	4b29      	ldr	r3, [pc, #164]	; (8002064 <HAL_RCC_GetSysClockFreq+0xac>)
 8001fc0:	1d3c      	adds	r4, r7, #4
 8001fc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001fc8:	f240 2301 	movw	r3, #513	; 0x201
 8001fcc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61fb      	str	r3, [r7, #28]
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61bb      	str	r3, [r7, #24]
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8001fda:	2300      	movs	r3, #0
 8001fdc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001fe2:	4b21      	ldr	r3, [pc, #132]	; (8002068 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	f003 030c 	and.w	r3, r3, #12
 8001fee:	2b04      	cmp	r3, #4
 8001ff0:	d002      	beq.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x40>
 8001ff2:	2b08      	cmp	r3, #8
 8001ff4:	d003      	beq.n	8001ffe <HAL_RCC_GetSysClockFreq+0x46>
 8001ff6:	e02b      	b.n	8002050 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ff8:	4b1c      	ldr	r3, [pc, #112]	; (800206c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ffa:	623b      	str	r3, [r7, #32]
      break;
 8001ffc:	e02b      	b.n	8002056 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	0c9b      	lsrs	r3, r3, #18
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	3328      	adds	r3, #40	; 0x28
 8002008:	443b      	add	r3, r7
 800200a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800200e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d012      	beq.n	8002040 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800201a:	4b13      	ldr	r3, [pc, #76]	; (8002068 <HAL_RCC_GetSysClockFreq+0xb0>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	0c5b      	lsrs	r3, r3, #17
 8002020:	f003 0301 	and.w	r3, r3, #1
 8002024:	3328      	adds	r3, #40	; 0x28
 8002026:	443b      	add	r3, r7
 8002028:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800202c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	4a0e      	ldr	r2, [pc, #56]	; (800206c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002032:	fb03 f202 	mul.w	r2, r3, r2
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	fbb2 f3f3 	udiv	r3, r2, r3
 800203c:	627b      	str	r3, [r7, #36]	; 0x24
 800203e:	e004      	b.n	800204a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	4a0b      	ldr	r2, [pc, #44]	; (8002070 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002044:	fb02 f303 	mul.w	r3, r2, r3
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	623b      	str	r3, [r7, #32]
      break;
 800204e:	e002      	b.n	8002056 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002050:	4b06      	ldr	r3, [pc, #24]	; (800206c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002052:	623b      	str	r3, [r7, #32]
      break;
 8002054:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002056:	6a3b      	ldr	r3, [r7, #32]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3728      	adds	r7, #40	; 0x28
 800205c:	46bd      	mov	sp, r7
 800205e:	bc90      	pop	{r4, r7}
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	08002668 	.word	0x08002668
 8002068:	40021000 	.word	0x40021000
 800206c:	007a1200 	.word	0x007a1200
 8002070:	003d0900 	.word	0x003d0900

08002074 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002078:	4b02      	ldr	r3, [pc, #8]	; (8002084 <HAL_RCC_GetHCLKFreq+0x10>)
 800207a:	681b      	ldr	r3, [r3, #0]
}
 800207c:	4618      	mov	r0, r3
 800207e:	46bd      	mov	sp, r7
 8002080:	bc80      	pop	{r7}
 8002082:	4770      	bx	lr
 8002084:	20000008 	.word	0x20000008

08002088 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800208c:	f7ff fff2 	bl	8002074 <HAL_RCC_GetHCLKFreq>
 8002090:	4602      	mov	r2, r0
 8002092:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	0adb      	lsrs	r3, r3, #11
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	4903      	ldr	r1, [pc, #12]	; (80020ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800209e:	5ccb      	ldrb	r3, [r1, r3]
 80020a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40021000 	.word	0x40021000
 80020ac:	08002688 	.word	0x08002688

080020b0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	220f      	movs	r2, #15
 80020be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80020c0:	4b11      	ldr	r3, [pc, #68]	; (8002108 <HAL_RCC_GetClockConfig+0x58>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f003 0203 	and.w	r2, r3, #3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80020cc:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <HAL_RCC_GetClockConfig+0x58>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80020d8:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <HAL_RCC_GetClockConfig+0x58>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80020e4:	4b08      	ldr	r3, [pc, #32]	; (8002108 <HAL_RCC_GetClockConfig+0x58>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	08db      	lsrs	r3, r3, #3
 80020ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80020f2:	4b06      	ldr	r3, [pc, #24]	; (800210c <HAL_RCC_GetClockConfig+0x5c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0207 	and.w	r2, r3, #7
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80020fe:	bf00      	nop
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	bc80      	pop	{r7}
 8002106:	4770      	bx	lr
 8002108:	40021000 	.word	0x40021000
 800210c:	40022000 	.word	0x40022000

08002110 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002118:	4b0a      	ldr	r3, [pc, #40]	; (8002144 <RCC_Delay+0x34>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a0a      	ldr	r2, [pc, #40]	; (8002148 <RCC_Delay+0x38>)
 800211e:	fba2 2303 	umull	r2, r3, r2, r3
 8002122:	0a5b      	lsrs	r3, r3, #9
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	fb02 f303 	mul.w	r3, r2, r3
 800212a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800212c:	bf00      	nop
  }
  while (Delay --);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	1e5a      	subs	r2, r3, #1
 8002132:	60fa      	str	r2, [r7, #12]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1f9      	bne.n	800212c <RCC_Delay+0x1c>
}
 8002138:	bf00      	nop
 800213a:	bf00      	nop
 800213c:	3714      	adds	r7, #20
 800213e:	46bd      	mov	sp, r7
 8002140:	bc80      	pop	{r7}
 8002142:	4770      	bx	lr
 8002144:	20000008 	.word	0x20000008
 8002148:	10624dd3 	.word	0x10624dd3

0800214c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e041      	b.n	80021e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d106      	bne.n	8002178 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f839 	bl	80021ea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2202      	movs	r2, #2
 800217c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3304      	adds	r3, #4
 8002188:	4619      	mov	r1, r3
 800218a:	4610      	mov	r0, r2
 800218c:	f000 f9b4 	bl	80024f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bc80      	pop	{r7}
 80021fa:	4770      	bx	lr

080021fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2b01      	cmp	r3, #1
 800220e:	d001      	beq.n	8002214 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e03a      	b.n	800228a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2202      	movs	r2, #2
 8002218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68da      	ldr	r2, [r3, #12]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f042 0201 	orr.w	r2, r2, #1
 800222a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a18      	ldr	r2, [pc, #96]	; (8002294 <HAL_TIM_Base_Start_IT+0x98>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d00e      	beq.n	8002254 <HAL_TIM_Base_Start_IT+0x58>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800223e:	d009      	beq.n	8002254 <HAL_TIM_Base_Start_IT+0x58>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a14      	ldr	r2, [pc, #80]	; (8002298 <HAL_TIM_Base_Start_IT+0x9c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d004      	beq.n	8002254 <HAL_TIM_Base_Start_IT+0x58>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a13      	ldr	r2, [pc, #76]	; (800229c <HAL_TIM_Base_Start_IT+0xa0>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d111      	bne.n	8002278 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2b06      	cmp	r3, #6
 8002264:	d010      	beq.n	8002288 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f042 0201 	orr.w	r2, r2, #1
 8002274:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002276:	e007      	b.n	8002288 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f042 0201 	orr.w	r2, r2, #1
 8002286:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3714      	adds	r7, #20
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr
 8002294:	40012c00 	.word	0x40012c00
 8002298:	40000400 	.word	0x40000400
 800229c:	40000800 	.word	0x40000800

080022a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d122      	bne.n	80022fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d11b      	bne.n	80022fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f06f 0202 	mvn.w	r2, #2
 80022cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2201      	movs	r2, #1
 80022d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	f003 0303 	and.w	r3, r3, #3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f8ed 	bl	80024c2 <HAL_TIM_IC_CaptureCallback>
 80022e8:	e005      	b.n	80022f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 f8e0 	bl	80024b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 f8ef 	bl	80024d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	f003 0304 	and.w	r3, r3, #4
 8002306:	2b04      	cmp	r3, #4
 8002308:	d122      	bne.n	8002350 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	2b04      	cmp	r3, #4
 8002316:	d11b      	bne.n	8002350 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f06f 0204 	mvn.w	r2, #4
 8002320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2202      	movs	r2, #2
 8002326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 f8c3 	bl	80024c2 <HAL_TIM_IC_CaptureCallback>
 800233c:	e005      	b.n	800234a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 f8b6 	bl	80024b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f000 f8c5 	bl	80024d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	f003 0308 	and.w	r3, r3, #8
 800235a:	2b08      	cmp	r3, #8
 800235c:	d122      	bne.n	80023a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	f003 0308 	and.w	r3, r3, #8
 8002368:	2b08      	cmp	r3, #8
 800236a:	d11b      	bne.n	80023a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f06f 0208 	mvn.w	r2, #8
 8002374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2204      	movs	r2, #4
 800237a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	69db      	ldr	r3, [r3, #28]
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 f899 	bl	80024c2 <HAL_TIM_IC_CaptureCallback>
 8002390:	e005      	b.n	800239e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 f88c 	bl	80024b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 f89b 	bl	80024d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	f003 0310 	and.w	r3, r3, #16
 80023ae:	2b10      	cmp	r3, #16
 80023b0:	d122      	bne.n	80023f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	f003 0310 	and.w	r3, r3, #16
 80023bc:	2b10      	cmp	r3, #16
 80023be:	d11b      	bne.n	80023f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f06f 0210 	mvn.w	r2, #16
 80023c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2208      	movs	r2, #8
 80023ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	69db      	ldr	r3, [r3, #28]
 80023d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 f86f 	bl	80024c2 <HAL_TIM_IC_CaptureCallback>
 80023e4:	e005      	b.n	80023f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 f862 	bl	80024b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 f871 	bl	80024d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b01      	cmp	r3, #1
 8002404:	d10e      	bne.n	8002424 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	2b01      	cmp	r3, #1
 8002412:	d107      	bne.n	8002424 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f06f 0201 	mvn.w	r2, #1
 800241c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f7fe fe8e 	bl	8001140 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800242e:	2b80      	cmp	r3, #128	; 0x80
 8002430:	d10e      	bne.n	8002450 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800243c:	2b80      	cmp	r3, #128	; 0x80
 800243e:	d107      	bne.n	8002450 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 f8bf 	bl	80025ce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800245a:	2b40      	cmp	r3, #64	; 0x40
 800245c:	d10e      	bne.n	800247c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002468:	2b40      	cmp	r3, #64	; 0x40
 800246a:	d107      	bne.n	800247c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f835 	bl	80024e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	f003 0320 	and.w	r3, r3, #32
 8002486:	2b20      	cmp	r3, #32
 8002488:	d10e      	bne.n	80024a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	f003 0320 	and.w	r3, r3, #32
 8002494:	2b20      	cmp	r3, #32
 8002496:	d107      	bne.n	80024a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f06f 0220 	mvn.w	r2, #32
 80024a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 f88a 	bl	80025bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024a8:	bf00      	nop
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	bc80      	pop	{r7}
 80024c0:	4770      	bx	lr

080024c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024c2:	b480      	push	{r7}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bc80      	pop	{r7}
 80024d2:	4770      	bx	lr

080024d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bc80      	pop	{r7}
 80024e4:	4770      	bx	lr

080024e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bc80      	pop	{r7}
 80024f6:	4770      	bx	lr

080024f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a29      	ldr	r2, [pc, #164]	; (80025b0 <TIM_Base_SetConfig+0xb8>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d00b      	beq.n	8002528 <TIM_Base_SetConfig+0x30>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002516:	d007      	beq.n	8002528 <TIM_Base_SetConfig+0x30>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a26      	ldr	r2, [pc, #152]	; (80025b4 <TIM_Base_SetConfig+0xbc>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d003      	beq.n	8002528 <TIM_Base_SetConfig+0x30>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a25      	ldr	r2, [pc, #148]	; (80025b8 <TIM_Base_SetConfig+0xc0>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d108      	bne.n	800253a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800252e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	4313      	orrs	r3, r2
 8002538:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a1c      	ldr	r2, [pc, #112]	; (80025b0 <TIM_Base_SetConfig+0xb8>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d00b      	beq.n	800255a <TIM_Base_SetConfig+0x62>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002548:	d007      	beq.n	800255a <TIM_Base_SetConfig+0x62>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a19      	ldr	r2, [pc, #100]	; (80025b4 <TIM_Base_SetConfig+0xbc>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d003      	beq.n	800255a <TIM_Base_SetConfig+0x62>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a18      	ldr	r2, [pc, #96]	; (80025b8 <TIM_Base_SetConfig+0xc0>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d108      	bne.n	800256c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002560:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	4313      	orrs	r3, r2
 800256a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	4313      	orrs	r3, r2
 8002578:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a07      	ldr	r2, [pc, #28]	; (80025b0 <TIM_Base_SetConfig+0xb8>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d103      	bne.n	80025a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	691a      	ldr	r2, [r3, #16]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	615a      	str	r2, [r3, #20]
}
 80025a6:	bf00      	nop
 80025a8:	3714      	adds	r7, #20
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr
 80025b0:	40012c00 	.word	0x40012c00
 80025b4:	40000400 	.word	0x40000400
 80025b8:	40000800 	.word	0x40000800

080025bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bc80      	pop	{r7}
 80025cc:	4770      	bx	lr

080025ce <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025d6:	bf00      	nop
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr

080025e0 <__libc_init_array>:
 80025e0:	b570      	push	{r4, r5, r6, lr}
 80025e2:	2600      	movs	r6, #0
 80025e4:	4d0c      	ldr	r5, [pc, #48]	; (8002618 <__libc_init_array+0x38>)
 80025e6:	4c0d      	ldr	r4, [pc, #52]	; (800261c <__libc_init_array+0x3c>)
 80025e8:	1b64      	subs	r4, r4, r5
 80025ea:	10a4      	asrs	r4, r4, #2
 80025ec:	42a6      	cmp	r6, r4
 80025ee:	d109      	bne.n	8002604 <__libc_init_array+0x24>
 80025f0:	f000 f822 	bl	8002638 <_init>
 80025f4:	2600      	movs	r6, #0
 80025f6:	4d0a      	ldr	r5, [pc, #40]	; (8002620 <__libc_init_array+0x40>)
 80025f8:	4c0a      	ldr	r4, [pc, #40]	; (8002624 <__libc_init_array+0x44>)
 80025fa:	1b64      	subs	r4, r4, r5
 80025fc:	10a4      	asrs	r4, r4, #2
 80025fe:	42a6      	cmp	r6, r4
 8002600:	d105      	bne.n	800260e <__libc_init_array+0x2e>
 8002602:	bd70      	pop	{r4, r5, r6, pc}
 8002604:	f855 3b04 	ldr.w	r3, [r5], #4
 8002608:	4798      	blx	r3
 800260a:	3601      	adds	r6, #1
 800260c:	e7ee      	b.n	80025ec <__libc_init_array+0xc>
 800260e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002612:	4798      	blx	r3
 8002614:	3601      	adds	r6, #1
 8002616:	e7f2      	b.n	80025fe <__libc_init_array+0x1e>
 8002618:	08002690 	.word	0x08002690
 800261c:	08002690 	.word	0x08002690
 8002620:	08002690 	.word	0x08002690
 8002624:	08002694 	.word	0x08002694

08002628 <memset>:
 8002628:	4603      	mov	r3, r0
 800262a:	4402      	add	r2, r0
 800262c:	4293      	cmp	r3, r2
 800262e:	d100      	bne.n	8002632 <memset+0xa>
 8002630:	4770      	bx	lr
 8002632:	f803 1b01 	strb.w	r1, [r3], #1
 8002636:	e7f9      	b.n	800262c <memset+0x4>

08002638 <_init>:
 8002638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800263a:	bf00      	nop
 800263c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800263e:	bc08      	pop	{r3}
 8002640:	469e      	mov	lr, r3
 8002642:	4770      	bx	lr

08002644 <_fini>:
 8002644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002646:	bf00      	nop
 8002648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800264a:	bc08      	pop	{r3}
 800264c:	469e      	mov	lr, r3
 800264e:	4770      	bx	lr
